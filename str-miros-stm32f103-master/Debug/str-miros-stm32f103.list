
str-miros-stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004168  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004298  08004298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c8  080042c8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080042c8  080042c8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042c8  080042c8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080042d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  20000024  080042f4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  080042f4  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a78c  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fb7  00000000  00000000  0002a81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  0002c7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f6  00000000  00000000  0002d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025e3  00000000  00000000  0002dc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9d1  00000000  00000000  00030269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ad32  00000000  00000000  0003dc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000319c  00000000  00000000  000c896c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000cbb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08004280 	.word	0x08004280

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08004280 	.word	0x08004280

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_d2f>:
 80004e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004f0:	bf24      	itt	cs
 80004f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004fa:	d90d      	bls.n	8000518 <__aeabi_d2f+0x30>
 80004fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000500:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000504:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000508:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800050c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000510:	bf08      	it	eq
 8000512:	f020 0001 	biceq.w	r0, r0, #1
 8000516:	4770      	bx	lr
 8000518:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800051c:	d121      	bne.n	8000562 <__aeabi_d2f+0x7a>
 800051e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000522:	bfbc      	itt	lt
 8000524:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000528:	4770      	bxlt	lr
 800052a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000532:	f1c2 0218 	rsb	r2, r2, #24
 8000536:	f1c2 0c20 	rsb	ip, r2, #32
 800053a:	fa10 f30c 	lsls.w	r3, r0, ip
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	bf18      	it	ne
 8000544:	f040 0001 	orrne.w	r0, r0, #1
 8000548:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800054c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000550:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000554:	ea40 000c 	orr.w	r0, r0, ip
 8000558:	fa23 f302 	lsr.w	r3, r3, r2
 800055c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000560:	e7cc      	b.n	80004fc <__aeabi_d2f+0x14>
 8000562:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000566:	d107      	bne.n	8000578 <__aeabi_d2f+0x90>
 8000568:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800056c:	bf1e      	ittt	ne
 800056e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000572:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000576:	4770      	bxne	lr
 8000578:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800057c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000580:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <__aeabi_frsub>:
 8000588:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800058c:	e002      	b.n	8000594 <__addsf3>
 800058e:	bf00      	nop

08000590 <__aeabi_fsub>:
 8000590:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000594 <__addsf3>:
 8000594:	0042      	lsls	r2, r0, #1
 8000596:	bf1f      	itttt	ne
 8000598:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800059c:	ea92 0f03 	teqne	r2, r3
 80005a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005a8:	d06a      	beq.n	8000680 <__addsf3+0xec>
 80005aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005b2:	bfc1      	itttt	gt
 80005b4:	18d2      	addgt	r2, r2, r3
 80005b6:	4041      	eorgt	r1, r0
 80005b8:	4048      	eorgt	r0, r1
 80005ba:	4041      	eorgt	r1, r0
 80005bc:	bfb8      	it	lt
 80005be:	425b      	neglt	r3, r3
 80005c0:	2b19      	cmp	r3, #25
 80005c2:	bf88      	it	hi
 80005c4:	4770      	bxhi	lr
 80005c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005d2:	bf18      	it	ne
 80005d4:	4240      	negne	r0, r0
 80005d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005e2:	bf18      	it	ne
 80005e4:	4249      	negne	r1, r1
 80005e6:	ea92 0f03 	teq	r2, r3
 80005ea:	d03f      	beq.n	800066c <__addsf3+0xd8>
 80005ec:	f1a2 0201 	sub.w	r2, r2, #1
 80005f0:	fa41 fc03 	asr.w	ip, r1, r3
 80005f4:	eb10 000c 	adds.w	r0, r0, ip
 80005f8:	f1c3 0320 	rsb	r3, r3, #32
 80005fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000600:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000604:	d502      	bpl.n	800060c <__addsf3+0x78>
 8000606:	4249      	negs	r1, r1
 8000608:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800060c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000610:	d313      	bcc.n	800063a <__addsf3+0xa6>
 8000612:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000616:	d306      	bcc.n	8000626 <__addsf3+0x92>
 8000618:	0840      	lsrs	r0, r0, #1
 800061a:	ea4f 0131 	mov.w	r1, r1, rrx
 800061e:	f102 0201 	add.w	r2, r2, #1
 8000622:	2afe      	cmp	r2, #254	; 0xfe
 8000624:	d251      	bcs.n	80006ca <__addsf3+0x136>
 8000626:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800062a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800062e:	bf08      	it	eq
 8000630:	f020 0001 	biceq.w	r0, r0, #1
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	4770      	bx	lr
 800063a:	0049      	lsls	r1, r1, #1
 800063c:	eb40 0000 	adc.w	r0, r0, r0
 8000640:	3a01      	subs	r2, #1
 8000642:	bf28      	it	cs
 8000644:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000648:	d2ed      	bcs.n	8000626 <__addsf3+0x92>
 800064a:	fab0 fc80 	clz	ip, r0
 800064e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000652:	ebb2 020c 	subs.w	r2, r2, ip
 8000656:	fa00 f00c 	lsl.w	r0, r0, ip
 800065a:	bfaa      	itet	ge
 800065c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000660:	4252      	neglt	r2, r2
 8000662:	4318      	orrge	r0, r3
 8000664:	bfbc      	itt	lt
 8000666:	40d0      	lsrlt	r0, r2
 8000668:	4318      	orrlt	r0, r3
 800066a:	4770      	bx	lr
 800066c:	f092 0f00 	teq	r2, #0
 8000670:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000674:	bf06      	itte	eq
 8000676:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800067a:	3201      	addeq	r2, #1
 800067c:	3b01      	subne	r3, #1
 800067e:	e7b5      	b.n	80005ec <__addsf3+0x58>
 8000680:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000684:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000688:	bf18      	it	ne
 800068a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800068e:	d021      	beq.n	80006d4 <__addsf3+0x140>
 8000690:	ea92 0f03 	teq	r2, r3
 8000694:	d004      	beq.n	80006a0 <__addsf3+0x10c>
 8000696:	f092 0f00 	teq	r2, #0
 800069a:	bf08      	it	eq
 800069c:	4608      	moveq	r0, r1
 800069e:	4770      	bx	lr
 80006a0:	ea90 0f01 	teq	r0, r1
 80006a4:	bf1c      	itt	ne
 80006a6:	2000      	movne	r0, #0
 80006a8:	4770      	bxne	lr
 80006aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006ae:	d104      	bne.n	80006ba <__addsf3+0x126>
 80006b0:	0040      	lsls	r0, r0, #1
 80006b2:	bf28      	it	cs
 80006b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006b8:	4770      	bx	lr
 80006ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006be:	bf3c      	itt	cc
 80006c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bxcc	lr
 80006c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006d2:	4770      	bx	lr
 80006d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006d8:	bf16      	itet	ne
 80006da:	4608      	movne	r0, r1
 80006dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006e0:	4601      	movne	r1, r0
 80006e2:	0242      	lsls	r2, r0, #9
 80006e4:	bf06      	itte	eq
 80006e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006ea:	ea90 0f01 	teqeq	r0, r1
 80006ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006f2:	4770      	bx	lr

080006f4 <__aeabi_ui2f>:
 80006f4:	f04f 0300 	mov.w	r3, #0
 80006f8:	e004      	b.n	8000704 <__aeabi_i2f+0x8>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2f>:
 80006fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	ea5f 0c00 	movs.w	ip, r0
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000710:	4601      	mov	r1, r0
 8000712:	f04f 0000 	mov.w	r0, #0
 8000716:	e01c      	b.n	8000752 <__aeabi_l2f+0x2a>

08000718 <__aeabi_ul2f>:
 8000718:	ea50 0201 	orrs.w	r2, r0, r1
 800071c:	bf08      	it	eq
 800071e:	4770      	bxeq	lr
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	e00a      	b.n	800073c <__aeabi_l2f+0x14>
 8000726:	bf00      	nop

08000728 <__aeabi_l2f>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000734:	d502      	bpl.n	800073c <__aeabi_l2f+0x14>
 8000736:	4240      	negs	r0, r0
 8000738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073c:	ea5f 0c01 	movs.w	ip, r1
 8000740:	bf02      	ittt	eq
 8000742:	4684      	moveq	ip, r0
 8000744:	4601      	moveq	r1, r0
 8000746:	2000      	moveq	r0, #0
 8000748:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800074c:	bf08      	it	eq
 800074e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000752:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000756:	fabc f28c 	clz	r2, ip
 800075a:	3a08      	subs	r2, #8
 800075c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000760:	db10      	blt.n	8000784 <__aeabi_l2f+0x5c>
 8000762:	fa01 fc02 	lsl.w	ip, r1, r2
 8000766:	4463      	add	r3, ip
 8000768:	fa00 fc02 	lsl.w	ip, r0, r2
 800076c:	f1c2 0220 	rsb	r2, r2, #32
 8000770:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000774:	fa20 f202 	lsr.w	r2, r0, r2
 8000778:	eb43 0002 	adc.w	r0, r3, r2
 800077c:	bf08      	it	eq
 800077e:	f020 0001 	biceq.w	r0, r0, #1
 8000782:	4770      	bx	lr
 8000784:	f102 0220 	add.w	r2, r2, #32
 8000788:	fa01 fc02 	lsl.w	ip, r1, r2
 800078c:	f1c2 0220 	rsb	r2, r2, #32
 8000790:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000794:	fa21 f202 	lsr.w	r2, r1, r2
 8000798:	eb43 0002 	adc.w	r0, r3, r2
 800079c:	bf08      	it	eq
 800079e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a2:	4770      	bx	lr

080007a4 <__aeabi_fmul>:
 80007a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007ac:	bf1e      	ittt	ne
 80007ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007b2:	ea92 0f0c 	teqne	r2, ip
 80007b6:	ea93 0f0c 	teqne	r3, ip
 80007ba:	d06f      	beq.n	800089c <__aeabi_fmul+0xf8>
 80007bc:	441a      	add	r2, r3
 80007be:	ea80 0c01 	eor.w	ip, r0, r1
 80007c2:	0240      	lsls	r0, r0, #9
 80007c4:	bf18      	it	ne
 80007c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007ca:	d01e      	beq.n	800080a <__aeabi_fmul+0x66>
 80007cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007d8:	fba0 3101 	umull	r3, r1, r0, r1
 80007dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007e4:	bf3e      	ittt	cc
 80007e6:	0049      	lslcc	r1, r1, #1
 80007e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007ec:	005b      	lslcc	r3, r3, #1
 80007ee:	ea40 0001 	orr.w	r0, r0, r1
 80007f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007f6:	2afd      	cmp	r2, #253	; 0xfd
 80007f8:	d81d      	bhi.n	8000836 <__aeabi_fmul+0x92>
 80007fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	4770      	bx	lr
 800080a:	f090 0f00 	teq	r0, #0
 800080e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000812:	bf08      	it	eq
 8000814:	0249      	lsleq	r1, r1, #9
 8000816:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800081a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800081e:	3a7f      	subs	r2, #127	; 0x7f
 8000820:	bfc2      	ittt	gt
 8000822:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000826:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800082a:	4770      	bxgt	lr
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	3a01      	subs	r2, #1
 8000836:	dc5d      	bgt.n	80008f4 <__aeabi_fmul+0x150>
 8000838:	f112 0f19 	cmn.w	r2, #25
 800083c:	bfdc      	itt	le
 800083e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000842:	4770      	bxle	lr
 8000844:	f1c2 0200 	rsb	r2, r2, #0
 8000848:	0041      	lsls	r1, r0, #1
 800084a:	fa21 f102 	lsr.w	r1, r1, r2
 800084e:	f1c2 0220 	rsb	r2, r2, #32
 8000852:	fa00 fc02 	lsl.w	ip, r0, r2
 8000856:	ea5f 0031 	movs.w	r0, r1, rrx
 800085a:	f140 0000 	adc.w	r0, r0, #0
 800085e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000862:	bf08      	it	eq
 8000864:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000868:	4770      	bx	lr
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000872:	bf02      	ittt	eq
 8000874:	0040      	lsleq	r0, r0, #1
 8000876:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800087a:	3a01      	subeq	r2, #1
 800087c:	d0f9      	beq.n	8000872 <__aeabi_fmul+0xce>
 800087e:	ea40 000c 	orr.w	r0, r0, ip
 8000882:	f093 0f00 	teq	r3, #0
 8000886:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800088a:	bf02      	ittt	eq
 800088c:	0049      	lsleq	r1, r1, #1
 800088e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000892:	3b01      	subeq	r3, #1
 8000894:	d0f9      	beq.n	800088a <__aeabi_fmul+0xe6>
 8000896:	ea41 010c 	orr.w	r1, r1, ip
 800089a:	e78f      	b.n	80007bc <__aeabi_fmul+0x18>
 800089c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008a0:	ea92 0f0c 	teq	r2, ip
 80008a4:	bf18      	it	ne
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d00a      	beq.n	80008c2 <__aeabi_fmul+0x11e>
 80008ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008b0:	bf18      	it	ne
 80008b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008b6:	d1d8      	bne.n	800086a <__aeabi_fmul+0xc6>
 80008b8:	ea80 0001 	eor.w	r0, r0, r1
 80008bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f090 0f00 	teq	r0, #0
 80008c6:	bf17      	itett	ne
 80008c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008cc:	4608      	moveq	r0, r1
 80008ce:	f091 0f00 	teqne	r1, #0
 80008d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008d6:	d014      	beq.n	8000902 <__aeabi_fmul+0x15e>
 80008d8:	ea92 0f0c 	teq	r2, ip
 80008dc:	d101      	bne.n	80008e2 <__aeabi_fmul+0x13e>
 80008de:	0242      	lsls	r2, r0, #9
 80008e0:	d10f      	bne.n	8000902 <__aeabi_fmul+0x15e>
 80008e2:	ea93 0f0c 	teq	r3, ip
 80008e6:	d103      	bne.n	80008f0 <__aeabi_fmul+0x14c>
 80008e8:	024b      	lsls	r3, r1, #9
 80008ea:	bf18      	it	ne
 80008ec:	4608      	movne	r0, r1
 80008ee:	d108      	bne.n	8000902 <__aeabi_fmul+0x15e>
 80008f0:	ea80 0001 	eor.w	r0, r0, r1
 80008f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000900:	4770      	bx	lr
 8000902:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bx	lr

0800090c <__aeabi_fdiv>:
 800090c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000910:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000914:	bf1e      	ittt	ne
 8000916:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800091a:	ea92 0f0c 	teqne	r2, ip
 800091e:	ea93 0f0c 	teqne	r3, ip
 8000922:	d069      	beq.n	80009f8 <__aeabi_fdiv+0xec>
 8000924:	eba2 0203 	sub.w	r2, r2, r3
 8000928:	ea80 0c01 	eor.w	ip, r0, r1
 800092c:	0249      	lsls	r1, r1, #9
 800092e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000932:	d037      	beq.n	80009a4 <__aeabi_fdiv+0x98>
 8000934:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000938:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800093c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000940:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000944:	428b      	cmp	r3, r1
 8000946:	bf38      	it	cc
 8000948:	005b      	lslcc	r3, r3, #1
 800094a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800094e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000952:	428b      	cmp	r3, r1
 8000954:	bf24      	itt	cs
 8000956:	1a5b      	subcs	r3, r3, r1
 8000958:	ea40 000c 	orrcs.w	r0, r0, ip
 800095c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000960:	bf24      	itt	cs
 8000962:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000966:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800096a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800096e:	bf24      	itt	cs
 8000970:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800097c:	bf24      	itt	cs
 800097e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000982:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000986:	011b      	lsls	r3, r3, #4
 8000988:	bf18      	it	ne
 800098a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800098e:	d1e0      	bne.n	8000952 <__aeabi_fdiv+0x46>
 8000990:	2afd      	cmp	r2, #253	; 0xfd
 8000992:	f63f af50 	bhi.w	8000836 <__aeabi_fmul+0x92>
 8000996:	428b      	cmp	r3, r1
 8000998:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009ac:	327f      	adds	r2, #127	; 0x7f
 80009ae:	bfc2      	ittt	gt
 80009b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009b8:	4770      	bxgt	lr
 80009ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	3a01      	subs	r2, #1
 80009c4:	e737      	b.n	8000836 <__aeabi_fmul+0x92>
 80009c6:	f092 0f00 	teq	r2, #0
 80009ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ce:	bf02      	ittt	eq
 80009d0:	0040      	lsleq	r0, r0, #1
 80009d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009d6:	3a01      	subeq	r2, #1
 80009d8:	d0f9      	beq.n	80009ce <__aeabi_fdiv+0xc2>
 80009da:	ea40 000c 	orr.w	r0, r0, ip
 80009de:	f093 0f00 	teq	r3, #0
 80009e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e6:	bf02      	ittt	eq
 80009e8:	0049      	lsleq	r1, r1, #1
 80009ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ee:	3b01      	subeq	r3, #1
 80009f0:	d0f9      	beq.n	80009e6 <__aeabi_fdiv+0xda>
 80009f2:	ea41 010c 	orr.w	r1, r1, ip
 80009f6:	e795      	b.n	8000924 <__aeabi_fdiv+0x18>
 80009f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009fc:	ea92 0f0c 	teq	r2, ip
 8000a00:	d108      	bne.n	8000a14 <__aeabi_fdiv+0x108>
 8000a02:	0242      	lsls	r2, r0, #9
 8000a04:	f47f af7d 	bne.w	8000902 <__aeabi_fmul+0x15e>
 8000a08:	ea93 0f0c 	teq	r3, ip
 8000a0c:	f47f af70 	bne.w	80008f0 <__aeabi_fmul+0x14c>
 8000a10:	4608      	mov	r0, r1
 8000a12:	e776      	b.n	8000902 <__aeabi_fmul+0x15e>
 8000a14:	ea93 0f0c 	teq	r3, ip
 8000a18:	d104      	bne.n	8000a24 <__aeabi_fdiv+0x118>
 8000a1a:	024b      	lsls	r3, r1, #9
 8000a1c:	f43f af4c 	beq.w	80008b8 <__aeabi_fmul+0x114>
 8000a20:	4608      	mov	r0, r1
 8000a22:	e76e      	b.n	8000902 <__aeabi_fmul+0x15e>
 8000a24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a28:	bf18      	it	ne
 8000a2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a2e:	d1ca      	bne.n	80009c6 <__aeabi_fdiv+0xba>
 8000a30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a34:	f47f af5c 	bne.w	80008f0 <__aeabi_fmul+0x14c>
 8000a38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a3c:	f47f af3c 	bne.w	80008b8 <__aeabi_fmul+0x114>
 8000a40:	e75f      	b.n	8000902 <__aeabi_fmul+0x15e>
 8000a42:	bf00      	nop

08000a44 <__gesf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpsf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__lesf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpsf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpsf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6e:	d011      	beq.n	8000a94 <__cmpsf2+0x40>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a76:	bf18      	it	ne
 8000a78:	ea90 0f01 	teqne	r0, r1
 8000a7c:	bf58      	it	pl
 8000a7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a82:	bf88      	it	hi
 8000a84:	17c8      	asrhi	r0, r1, #31
 8000a86:	bf38      	it	cc
 8000a88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a8c:	bf18      	it	ne
 8000a8e:	f040 0001 	orrne.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a98:	d102      	bne.n	8000aa0 <__cmpsf2+0x4c>
 8000a9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a9e:	d105      	bne.n	8000aac <__cmpsf2+0x58>
 8000aa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000aa4:	d1e4      	bne.n	8000a70 <__cmpsf2+0x1c>
 8000aa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000aaa:	d0e1      	beq.n	8000a70 <__cmpsf2+0x1c>
 8000aac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_cfrcmple>:
 8000ab4:	4684      	mov	ip, r0
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	4661      	mov	r1, ip
 8000aba:	e7ff      	b.n	8000abc <__aeabi_cfcmpeq>

08000abc <__aeabi_cfcmpeq>:
 8000abc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000abe:	f7ff ffc9 	bl	8000a54 <__cmpsf2>
 8000ac2:	2800      	cmp	r0, #0
 8000ac4:	bf48      	it	mi
 8000ac6:	f110 0f00 	cmnmi.w	r0, #0
 8000aca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000acc <__aeabi_fcmpeq>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff fff4 	bl	8000abc <__aeabi_cfcmpeq>
 8000ad4:	bf0c      	ite	eq
 8000ad6:	2001      	moveq	r0, #1
 8000ad8:	2000      	movne	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fcmplt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffea 	bl	8000abc <__aeabi_cfcmpeq>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_fcmple>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffe0 	bl	8000abc <__aeabi_cfcmpeq>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_fcmpge>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffd2 	bl	8000ab4 <__aeabi_cfrcmple>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fcmpgt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffc8 	bl	8000ab4 <__aeabi_cfrcmple>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_f2iz>:
 8000b30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b38:	d30f      	bcc.n	8000b5a <__aeabi_f2iz+0x2a>
 8000b3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_f2iz+0x30>
 8000b44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b50:	fa23 f002 	lsr.w	r0, r3, r2
 8000b54:	bf18      	it	ne
 8000b56:	4240      	negne	r0, r0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	4770      	bx	lr
 8000b60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b64:	d101      	bne.n	8000b6a <__aeabi_f2iz+0x3a>
 8000b66:	0242      	lsls	r2, r0, #9
 8000b68:	d105      	bne.n	8000b76 <__aeabi_f2iz+0x46>
 8000b6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b6e:	bf08      	it	eq
 8000b70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_IncTick+0x1c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x20>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <HAL_IncTick+0x20>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000040 	.word	0x20000040

08000ba0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <HAL_GetTick+0x10>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	20000040 	.word	0x20000040

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4906      	ldr	r1, [pc, #24]	; (8000c04 <__NVIC_EnableIRQ+0x34>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd2:	f7ff ff6f 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	6978      	ldr	r0, [r7, #20]
 8000cde:	f7ff ffbd 	bl	8000c5c <NVIC_EncodePriority>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff8c 	bl	8000c08 <__NVIC_SetPriority>
}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff62 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b08b      	sub	sp, #44	; 0x2c
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e169      	b.n	8000ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	f040 8158 	bne.w	8000ff6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4a9a      	ldr	r2, [pc, #616]	; (8000fb4 <HAL_GPIO_Init+0x2a0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d05e      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d50:	4a98      	ldr	r2, [pc, #608]	; (8000fb4 <HAL_GPIO_Init+0x2a0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d875      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d56:	4a98      	ldr	r2, [pc, #608]	; (8000fb8 <HAL_GPIO_Init+0x2a4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d058      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d5c:	4a96      	ldr	r2, [pc, #600]	; (8000fb8 <HAL_GPIO_Init+0x2a4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d86f      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d62:	4a96      	ldr	r2, [pc, #600]	; (8000fbc <HAL_GPIO_Init+0x2a8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d052      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d68:	4a94      	ldr	r2, [pc, #592]	; (8000fbc <HAL_GPIO_Init+0x2a8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d869      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d6e:	4a94      	ldr	r2, [pc, #592]	; (8000fc0 <HAL_GPIO_Init+0x2ac>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d04c      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d74:	4a92      	ldr	r2, [pc, #584]	; (8000fc0 <HAL_GPIO_Init+0x2ac>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d863      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d7a:	4a92      	ldr	r2, [pc, #584]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d046      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
 8000d80:	4a90      	ldr	r2, [pc, #576]	; (8000fc4 <HAL_GPIO_Init+0x2b0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d85d      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d86:	2b12      	cmp	r3, #18
 8000d88:	d82a      	bhi.n	8000de0 <HAL_GPIO_Init+0xcc>
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	d859      	bhi.n	8000e42 <HAL_GPIO_Init+0x12e>
 8000d8e:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <HAL_GPIO_Init+0x80>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000e0f 	.word	0x08000e0f
 8000d98:	08000de9 	.word	0x08000de9
 8000d9c:	08000dfb 	.word	0x08000dfb
 8000da0:	08000e3d 	.word	0x08000e3d
 8000da4:	08000e43 	.word	0x08000e43
 8000da8:	08000e43 	.word	0x08000e43
 8000dac:	08000e43 	.word	0x08000e43
 8000db0:	08000e43 	.word	0x08000e43
 8000db4:	08000e43 	.word	0x08000e43
 8000db8:	08000e43 	.word	0x08000e43
 8000dbc:	08000e43 	.word	0x08000e43
 8000dc0:	08000e43 	.word	0x08000e43
 8000dc4:	08000e43 	.word	0x08000e43
 8000dc8:	08000e43 	.word	0x08000e43
 8000dcc:	08000e43 	.word	0x08000e43
 8000dd0:	08000e43 	.word	0x08000e43
 8000dd4:	08000e43 	.word	0x08000e43
 8000dd8:	08000df1 	.word	0x08000df1
 8000ddc:	08000e05 	.word	0x08000e05
 8000de0:	4a79      	ldr	r2, [pc, #484]	; (8000fc8 <HAL_GPIO_Init+0x2b4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000de6:	e02c      	b.n	8000e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	623b      	str	r3, [r7, #32]
          break;
 8000dee:	e029      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	3304      	adds	r3, #4
 8000df6:	623b      	str	r3, [r7, #32]
          break;
 8000df8:	e024      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	3308      	adds	r3, #8
 8000e00:	623b      	str	r3, [r7, #32]
          break;
 8000e02:	e01f      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	330c      	adds	r3, #12
 8000e0a:	623b      	str	r3, [r7, #32]
          break;
 8000e0c:	e01a      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e16:	2304      	movs	r3, #4
 8000e18:	623b      	str	r3, [r7, #32]
          break;
 8000e1a:	e013      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d105      	bne.n	8000e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e24:	2308      	movs	r3, #8
 8000e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	611a      	str	r2, [r3, #16]
          break;
 8000e2e:	e009      	b.n	8000e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e30:	2308      	movs	r3, #8
 8000e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	615a      	str	r2, [r3, #20]
          break;
 8000e3a:	e003      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
          break;
 8000e40:	e000      	b.n	8000e44 <HAL_GPIO_Init+0x130>
          break;
 8000e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2bff      	cmp	r3, #255	; 0xff
 8000e48:	d801      	bhi.n	8000e4e <HAL_GPIO_Init+0x13a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	e001      	b.n	8000e52 <HAL_GPIO_Init+0x13e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3304      	adds	r3, #4
 8000e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2bff      	cmp	r3, #255	; 0xff
 8000e58:	d802      	bhi.n	8000e60 <HAL_GPIO_Init+0x14c>
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	e002      	b.n	8000e66 <HAL_GPIO_Init+0x152>
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	3b08      	subs	r3, #8
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	401a      	ands	r2, r3
 8000e78:	6a39      	ldr	r1, [r7, #32]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	431a      	orrs	r2, r3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e94:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <HAL_GPIO_Init+0x2b8>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eac:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <HAL_GPIO_Init+0x2bc>)
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a40      	ldr	r2, [pc, #256]	; (8000fd4 <HAL_GPIO_Init+0x2c0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d013      	beq.n	8000f00 <HAL_GPIO_Init+0x1ec>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a3f      	ldr	r2, [pc, #252]	; (8000fd8 <HAL_GPIO_Init+0x2c4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00d      	beq.n	8000efc <HAL_GPIO_Init+0x1e8>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a3e      	ldr	r2, [pc, #248]	; (8000fdc <HAL_GPIO_Init+0x2c8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e4>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a3d      	ldr	r2, [pc, #244]	; (8000fe0 <HAL_GPIO_Init+0x2cc>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d101      	bne.n	8000ef4 <HAL_GPIO_Init+0x1e0>
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e006      	b.n	8000f02 <HAL_GPIO_Init+0x1ee>
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	e004      	b.n	8000f02 <HAL_GPIO_Init+0x1ee>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e002      	b.n	8000f02 <HAL_GPIO_Init+0x1ee>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <HAL_GPIO_Init+0x1ee>
 8000f00:	2300      	movs	r3, #0
 8000f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f04:	f002 0203 	and.w	r2, r2, #3
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	4093      	lsls	r3, r2
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f12:	492f      	ldr	r1, [pc, #188]	; (8000fd0 <HAL_GPIO_Init+0x2bc>)
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d006      	beq.n	8000f3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	492c      	ldr	r1, [pc, #176]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	608b      	str	r3, [r1, #8]
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f3a:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	4928      	ldr	r1, [pc, #160]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	4922      	ldr	r1, [pc, #136]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	60cb      	str	r3, [r1, #12]
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	491e      	ldr	r1, [pc, #120]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	4918      	ldr	r1, [pc, #96]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	4914      	ldr	r1, [pc, #80]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d021      	beq.n	8000fe8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <HAL_GPIO_Init+0x2d0>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	e021      	b.n	8000ff6 <HAL_GPIO_Init+0x2e2>
 8000fb2:	bf00      	nop
 8000fb4:	10320000 	.word	0x10320000
 8000fb8:	10310000 	.word	0x10310000
 8000fbc:	10220000 	.word	0x10220000
 8000fc0:	10210000 	.word	0x10210000
 8000fc4:	10120000 	.word	0x10120000
 8000fc8:	10110000 	.word	0x10110000
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40011400 	.word	0x40011400
 8000fe4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_GPIO_Init+0x304>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	4909      	ldr	r1, [pc, #36]	; (8001018 <HAL_GPIO_Init+0x304>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	fa22 f303 	lsr.w	r3, r2, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	f47f ae8e 	bne.w	8000d28 <HAL_GPIO_Init+0x14>
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	372c      	adds	r7, #44	; 0x2c
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40010400 	.word	0x40010400

0800101c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4618      	mov	r0, r3
 800103c:	f002 f892 	bl	8003164 <HAL_GPIO_EXTI_Callback>
  }
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e041      	b.n	80010e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d106      	bne.n	8001078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f002 ff3a 	bl	8003eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2202      	movs	r2, #2
 800107c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3304      	adds	r3, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f000 fbc6 	bl	800181c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e041      	b.n	8001180 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d106      	bne.n	8001116 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f839 	bl	8001188 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2202      	movs	r2, #2
 800111a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3304      	adds	r3, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4610      	mov	r0, r2
 800112a:	f000 fb77 	bl	800181c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
	...

0800119c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d109      	bne.n	80011c0 <HAL_TIM_PWM_Start+0x24>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	bf14      	ite	ne
 80011b8:	2301      	movne	r3, #1
 80011ba:	2300      	moveq	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	e022      	b.n	8001206 <HAL_TIM_PWM_Start+0x6a>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d109      	bne.n	80011da <HAL_TIM_PWM_Start+0x3e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	e015      	b.n	8001206 <HAL_TIM_PWM_Start+0x6a>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d109      	bne.n	80011f4 <HAL_TIM_PWM_Start+0x58>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	e008      	b.n	8001206 <HAL_TIM_PWM_Start+0x6a>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e05e      	b.n	80012cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d104      	bne.n	800121e <HAL_TIM_PWM_Start+0x82>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800121c:	e013      	b.n	8001246 <HAL_TIM_PWM_Start+0xaa>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d104      	bne.n	800122e <HAL_TIM_PWM_Start+0x92>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800122c:	e00b      	b.n	8001246 <HAL_TIM_PWM_Start+0xaa>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b08      	cmp	r3, #8
 8001232:	d104      	bne.n	800123e <HAL_TIM_PWM_Start+0xa2>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2202      	movs	r2, #2
 8001238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800123c:	e003      	b.n	8001246 <HAL_TIM_PWM_Start+0xaa>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2202      	movs	r2, #2
 8001242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2201      	movs	r2, #1
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fd64 	bl	8001d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <HAL_TIM_PWM_Start+0x138>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d107      	bne.n	800126e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800126c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_TIM_PWM_Start+0x138>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d00e      	beq.n	8001296 <HAL_TIM_PWM_Start+0xfa>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001280:	d009      	beq.n	8001296 <HAL_TIM_PWM_Start+0xfa>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_TIM_PWM_Start+0x13c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d004      	beq.n	8001296 <HAL_TIM_PWM_Start+0xfa>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_TIM_PWM_Start+0x140>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d111      	bne.n	80012ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2b06      	cmp	r3, #6
 80012a6:	d010      	beq.n	80012ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012b8:	e007      	b.n	80012ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40012c00 	.word	0x40012c00
 80012d8:	40000400 	.word	0x40000400
 80012dc:	40000800 	.word	0x40000800

080012e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d020      	beq.n	8001344 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01b      	beq.n	8001344 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f06f 0202 	mvn.w	r2, #2
 8001314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fa5a 	bl	80017e4 <HAL_TIM_IC_CaptureCallback>
 8001330:	e005      	b.n	800133e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa4d 	bl	80017d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 fa5c 	bl	80017f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d020      	beq.n	8001390 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01b      	beq.n	8001390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f06f 0204 	mvn.w	r2, #4
 8001360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2202      	movs	r2, #2
 8001366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fa34 	bl	80017e4 <HAL_TIM_IC_CaptureCallback>
 800137c:	e005      	b.n	800138a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fa27 	bl	80017d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fa36 	bl	80017f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d020      	beq.n	80013dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d01b      	beq.n	80013dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f06f 0208 	mvn.w	r2, #8
 80013ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2204      	movs	r2, #4
 80013b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fa0e 	bl	80017e4 <HAL_TIM_IC_CaptureCallback>
 80013c8:	e005      	b.n	80013d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fa01 	bl	80017d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 fa10 	bl	80017f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d020      	beq.n	8001428 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01b      	beq.n	8001428 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f06f 0210 	mvn.w	r2, #16
 80013f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2208      	movs	r2, #8
 80013fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f9e8 	bl	80017e4 <HAL_TIM_IC_CaptureCallback>
 8001414:	e005      	b.n	8001422 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f9db 	bl	80017d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f9ea 	bl	80017f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00c      	beq.n	800144c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f06f 0201 	mvn.w	r2, #1
 8001444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fcfc 	bl	8001e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00c      	beq.n	8001470 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145c:	2b00      	cmp	r3, #0
 800145e:	d007      	beq.n	8001470 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fce1 	bl	8001e32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00c      	beq.n	8001494 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800148c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f9ba 	bl	8001808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00c      	beq.n	80014b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f003 0320 	and.w	r3, r3, #32
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d007      	beq.n	80014b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f06f 0220 	mvn.w	r2, #32
 80014b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fcb4 	bl	8001e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80014da:	2302      	movs	r3, #2
 80014dc:	e0ae      	b.n	800163c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	f200 809f 	bhi.w	800162c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80014ee:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	08001529 	.word	0x08001529
 80014f8:	0800162d 	.word	0x0800162d
 80014fc:	0800162d 	.word	0x0800162d
 8001500:	0800162d 	.word	0x0800162d
 8001504:	08001569 	.word	0x08001569
 8001508:	0800162d 	.word	0x0800162d
 800150c:	0800162d 	.word	0x0800162d
 8001510:	0800162d 	.word	0x0800162d
 8001514:	080015ab 	.word	0x080015ab
 8001518:	0800162d 	.word	0x0800162d
 800151c:	0800162d 	.word	0x0800162d
 8001520:	0800162d 	.word	0x0800162d
 8001524:	080015eb 	.word	0x080015eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f9d6 	bl	80018e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699a      	ldr	r2, [r3, #24]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0208 	orr.w	r2, r2, #8
 8001542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0204 	bic.w	r2, r2, #4
 8001552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6999      	ldr	r1, [r3, #24]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	619a      	str	r2, [r3, #24]
      break;
 8001566:	e064      	b.n	8001632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fa1c 	bl	80019ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699a      	ldr	r2, [r3, #24]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699a      	ldr	r2, [r3, #24]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6999      	ldr	r1, [r3, #24]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	021a      	lsls	r2, r3, #8
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	619a      	str	r2, [r3, #24]
      break;
 80015a8:	e043      	b.n	8001632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 fa65 	bl	8001a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69da      	ldr	r2, [r3, #28]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0208 	orr.w	r2, r2, #8
 80015c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0204 	bic.w	r2, r2, #4
 80015d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	69d9      	ldr	r1, [r3, #28]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	61da      	str	r2, [r3, #28]
      break;
 80015e8:	e023      	b.n	8001632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 faaf 	bl	8001b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69da      	ldr	r2, [r3, #28]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69da      	ldr	r2, [r3, #28]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69d9      	ldr	r1, [r3, #28]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	021a      	lsls	r2, r3, #8
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	61da      	str	r2, [r3, #28]
      break;
 800162a:	e002      	b.n	8001632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	75fb      	strb	r3, [r7, #23]
      break;
 8001630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800163a:	7dfb      	ldrb	r3, [r7, #23]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_TIM_ConfigClockSource+0x1c>
 800165c:	2302      	movs	r3, #2
 800165e:	e0b4      	b.n	80017ca <HAL_TIM_ConfigClockSource+0x186>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800167e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001698:	d03e      	beq.n	8001718 <HAL_TIM_ConfigClockSource+0xd4>
 800169a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800169e:	f200 8087 	bhi.w	80017b0 <HAL_TIM_ConfigClockSource+0x16c>
 80016a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016a6:	f000 8086 	beq.w	80017b6 <HAL_TIM_ConfigClockSource+0x172>
 80016aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ae:	d87f      	bhi.n	80017b0 <HAL_TIM_ConfigClockSource+0x16c>
 80016b0:	2b70      	cmp	r3, #112	; 0x70
 80016b2:	d01a      	beq.n	80016ea <HAL_TIM_ConfigClockSource+0xa6>
 80016b4:	2b70      	cmp	r3, #112	; 0x70
 80016b6:	d87b      	bhi.n	80017b0 <HAL_TIM_ConfigClockSource+0x16c>
 80016b8:	2b60      	cmp	r3, #96	; 0x60
 80016ba:	d050      	beq.n	800175e <HAL_TIM_ConfigClockSource+0x11a>
 80016bc:	2b60      	cmp	r3, #96	; 0x60
 80016be:	d877      	bhi.n	80017b0 <HAL_TIM_ConfigClockSource+0x16c>
 80016c0:	2b50      	cmp	r3, #80	; 0x50
 80016c2:	d03c      	beq.n	800173e <HAL_TIM_ConfigClockSource+0xfa>
 80016c4:	2b50      	cmp	r3, #80	; 0x50
 80016c6:	d873      	bhi.n	80017b0 <HAL_TIM_ConfigClockSource+0x16c>
 80016c8:	2b40      	cmp	r3, #64	; 0x40
 80016ca:	d058      	beq.n	800177e <HAL_TIM_ConfigClockSource+0x13a>
 80016cc:	2b40      	cmp	r3, #64	; 0x40
 80016ce:	d86f      	bhi.n	80017b0 <HAL_TIM_ConfigClockSource+0x16c>
 80016d0:	2b30      	cmp	r3, #48	; 0x30
 80016d2:	d064      	beq.n	800179e <HAL_TIM_ConfigClockSource+0x15a>
 80016d4:	2b30      	cmp	r3, #48	; 0x30
 80016d6:	d86b      	bhi.n	80017b0 <HAL_TIM_ConfigClockSource+0x16c>
 80016d8:	2b20      	cmp	r3, #32
 80016da:	d060      	beq.n	800179e <HAL_TIM_ConfigClockSource+0x15a>
 80016dc:	2b20      	cmp	r3, #32
 80016de:	d867      	bhi.n	80017b0 <HAL_TIM_ConfigClockSource+0x16c>
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d05c      	beq.n	800179e <HAL_TIM_ConfigClockSource+0x15a>
 80016e4:	2b10      	cmp	r3, #16
 80016e6:	d05a      	beq.n	800179e <HAL_TIM_ConfigClockSource+0x15a>
 80016e8:	e062      	b.n	80017b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80016fa:	f000 faf0 	bl	8001cde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800170c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	609a      	str	r2, [r3, #8]
      break;
 8001716:	e04f      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001728:	f000 fad9 	bl	8001cde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800173a:	609a      	str	r2, [r3, #8]
      break;
 800173c:	e03c      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800174a:	461a      	mov	r2, r3
 800174c:	f000 fa50 	bl	8001bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2150      	movs	r1, #80	; 0x50
 8001756:	4618      	mov	r0, r3
 8001758:	f000 faa7 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 800175c:	e02c      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800176a:	461a      	mov	r2, r3
 800176c:	f000 fa6e 	bl	8001c4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2160      	movs	r1, #96	; 0x60
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fa97 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 800177c:	e01c      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800178a:	461a      	mov	r2, r3
 800178c:	f000 fa30 	bl	8001bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2140      	movs	r1, #64	; 0x40
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fa87 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 800179c:	e00c      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4610      	mov	r0, r2
 80017aa:	f000 fa7e 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 80017ae:	e003      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
      break;
 80017b4:	e000      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80017b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
	...

0800181c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a29      	ldr	r2, [pc, #164]	; (80018d4 <TIM_Base_SetConfig+0xb8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00b      	beq.n	800184c <TIM_Base_SetConfig+0x30>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183a:	d007      	beq.n	800184c <TIM_Base_SetConfig+0x30>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <TIM_Base_SetConfig+0xbc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d003      	beq.n	800184c <TIM_Base_SetConfig+0x30>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a25      	ldr	r2, [pc, #148]	; (80018dc <TIM_Base_SetConfig+0xc0>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d108      	bne.n	800185e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <TIM_Base_SetConfig+0xb8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00b      	beq.n	800187e <TIM_Base_SetConfig+0x62>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186c:	d007      	beq.n	800187e <TIM_Base_SetConfig+0x62>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <TIM_Base_SetConfig+0xbc>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d003      	beq.n	800187e <TIM_Base_SetConfig+0x62>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a18      	ldr	r2, [pc, #96]	; (80018dc <TIM_Base_SetConfig+0xc0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d108      	bne.n	8001890 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <TIM_Base_SetConfig+0xb8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d103      	bne.n	80018c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	615a      	str	r2, [r3, #20]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40012c00 	.word	0x40012c00
 80018d8:	40000400 	.word	0x40000400
 80018dc:	40000800 	.word	0x40000800

080018e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f023 0201 	bic.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 0303 	bic.w	r3, r3, #3
 8001916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f023 0302 	bic.w	r3, r3, #2
 8001928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <TIM_OC1_SetConfig+0xc8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d10c      	bne.n	8001956 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f023 0308 	bic.w	r3, r3, #8
 8001942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	4313      	orrs	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <TIM_OC1_SetConfig+0xc8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d111      	bne.n	8001982 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800196c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	621a      	str	r2, [r3, #32]
}
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40012c00 	.word	0x40012c00

080019ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f023 0210 	bic.w	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f023 0320 	bic.w	r3, r3, #32
 80019f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <TIM_OC2_SetConfig+0xd0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d10d      	bne.n	8001a28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <TIM_OC2_SetConfig+0xd0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d113      	bne.n	8001a58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	621a      	str	r2, [r3, #32]
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	40012c00 	.word	0x40012c00

08001a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f023 0303 	bic.w	r3, r3, #3
 8001ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <TIM_OC3_SetConfig+0xd0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d10d      	bne.n	8001afa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <TIM_OC3_SetConfig+0xd0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d113      	bne.n	8001b2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	621a      	str	r2, [r3, #32]
}
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40012c00 	.word	0x40012c00

08001b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	031b      	lsls	r3, r3, #12
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <TIM_OC4_SetConfig+0x98>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d109      	bne.n	8001bc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	621a      	str	r2, [r3, #32]
}
 8001be2:	bf00      	nop
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40012c00 	.word	0x40012c00

08001bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f023 0201 	bic.w	r2, r3, #1
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f023 030a 	bic.w	r3, r3, #10
 8001c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	621a      	str	r2, [r3, #32]
}
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	f023 0210 	bic.w	r2, r3, #16
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	031b      	lsls	r3, r3, #12
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	621a      	str	r2, [r3, #32]
}
 8001ca0:	bf00      	nop
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f043 0307 	orr.w	r3, r3, #7
 8001ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	609a      	str	r2, [r3, #8]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b087      	sub	sp, #28
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	021a      	lsls	r2, r3, #8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	609a      	str	r2, [r3, #8]
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	2201      	movs	r2, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a1a      	ldr	r2, [r3, #32]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a1a      	ldr	r2, [r3, #32]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	431a      	orrs	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	621a      	str	r2, [r3, #32]
}
 8001d5a:	bf00      	nop
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e046      	b.n	8001e0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00e      	beq.n	8001dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc8:	d009      	beq.n	8001dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d004      	beq.n	8001dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a10      	ldr	r2, [pc, #64]	; (8001e1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10c      	bne.n	8001df8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	40012c00 	.word	0x40012c00
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40000800 	.word	0x40000800

08001e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8001e4c:	f7fe fe96 	bl	8000b7c <HAL_IncTick>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <TIM2_IRQHandler>:
/**
  * @brief  This function handles TIM interrupt request.
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <TIM2_IRQHandler+0x10>)
 8001e5e:	f7ff fa3f 	bl	80012e0 <HAL_TIM_IRQHandler>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000044 	.word	0x20000044

08001e6c <VL53L0X_init>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X_init(struct VL53L0X* dev)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  // VL53L0X_DataInit() begin
  i2c_init(I2C1);
 8001e74:	4859      	ldr	r0, [pc, #356]	; (8001fdc <VL53L0X_init+0x170>)
 8001e76:	f001 ff2d 	bl	8003cd4 <i2c_init>

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (dev->io_2v8)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <VL53L0X_init+0x30>
  {
    VL53L0X_writeReg(dev, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, VL53L0X_readReg(dev, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01 ); // set bit 0
 8001e82:	2189      	movs	r1, #137	; 0x89
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fb11 	bl	80024ac <VL53L0X_readReg>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	2189      	movs	r1, #137	; 0x89
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 faa8 	bl	80023ec <VL53L0X_writeReg>
  }

  // "Set I2C standard mode"
  VL53L0X_writeReg(dev, 0x88, 0x00);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2188      	movs	r1, #136	; 0x88
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 faa3 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x80, 0x01);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fa9e 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	21ff      	movs	r1, #255	; 0xff
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fa99 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fa94 	bl	80023ec <VL53L0X_writeReg>
  dev->stop_variable = VL53L0X_readReg(dev, 0x91);
 8001ec4:	2191      	movs	r1, #145	; 0x91
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 faf0 	bl	80024ac <VL53L0X_readReg>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	741a      	strb	r2, [r3, #16]
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fa87 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	21ff      	movs	r1, #255	; 0xff
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fa82 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fa7d 	bl	80023ec <VL53L0X_writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  VL53L0X_writeReg(dev, MSRC_CONFIG_CONTROL, VL53L0X_readReg(dev,  MSRC_CONFIG_CONTROL) | 0x12);
 8001ef2:	2160      	movs	r1, #96	; 0x60
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fad9 	bl	80024ac <VL53L0X_readReg>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f043 0312 	orr.w	r3, r3, #18
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	2160      	movs	r1, #96	; 0x60
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fa70 	bl	80023ec <VL53L0X_writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  VL53L0X_setSignalRateLimit(dev);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fb47 	bl	80025a0 <VL53L0X_setSignalRateLimit>

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001f12:	22ff      	movs	r2, #255	; 0xff
 8001f14:	2101      	movs	r1, #1
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fa68 	bl	80023ec <VL53L0X_writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!VL53L0X_getSpadInfo(dev, &spad_count, &spad_type_is_aperture)) { return false; }
 8001f1c:	f107 0213 	add.w	r2, r7, #19
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fcd0 	bl	80028cc <VL53L0X_getSpadInfo>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f083 0301 	eor.w	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <VL53L0X_init+0xd0>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e252      	b.n	80023e2 <VL53L0X_init+0x576>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  VL53L0X_readMulti(dev, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001f3c:	f107 020c 	add.w	r2, r7, #12
 8001f40:	2306      	movs	r3, #6
 8001f42:	21b0      	movs	r1, #176	; 0xb0
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fb0d 	bl	8002564 <VL53L0X_readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	21ff      	movs	r1, #255	; 0xff
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fa4c 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001f54:	2200      	movs	r2, #0
 8001f56:	214f      	movs	r1, #79	; 0x4f
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fa47 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001f5e:	222c      	movs	r2, #44	; 0x2c
 8001f60:	214e      	movs	r1, #78	; 0x4e
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fa42 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	21ff      	movs	r1, #255	; 0xff
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fa3d 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001f72:	22b4      	movs	r2, #180	; 0xb4
 8001f74:	21b6      	movs	r1, #182	; 0xb6
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa38 	bl	80023ec <VL53L0X_writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <VL53L0X_init+0x11a>
 8001f82:	230c      	movs	r3, #12
 8001f84:	e000      	b.n	8001f88 <VL53L0X_init+0x11c>
 8001f86:	2300      	movs	r3, #0
 8001f88:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	75bb      	strb	r3, [r7, #22]
 8001f92:	e03c      	b.n	800200e <VL53L0X_init+0x1a2>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8001f94:	7dba      	ldrb	r2, [r7, #22]
 8001f96:	7d7b      	ldrb	r3, [r7, #21]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d303      	bcc.n	8001fa4 <VL53L0X_init+0x138>
 8001f9c:	7d3b      	ldrb	r3, [r7, #20]
 8001f9e:	7dfa      	ldrb	r2, [r7, #23]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d11d      	bne.n	8001fe0 <VL53L0X_init+0x174>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8001fa4:	7dbb      	ldrb	r3, [r7, #22]
 8001fa6:	08db      	lsrs	r3, r3, #3
 8001fa8:	b2d8      	uxtb	r0, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	3318      	adds	r3, #24
 8001fae:	443b      	add	r3, r7
 8001fb0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001fb4:	b25a      	sxtb	r2, r3
 8001fb6:	7dbb      	ldrb	r3, [r7, #22]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	b25a      	sxtb	r2, r3
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	3318      	adds	r3, #24
 8001fd2:	443b      	add	r3, r7
 8001fd4:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001fd8:	e016      	b.n	8002008 <VL53L0X_init+0x19c>
 8001fda:	bf00      	nop
 8001fdc:	40005400 	.word	0x40005400
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8001fe0:	7dbb      	ldrb	r3, [r7, #22]
 8001fe2:	08db      	lsrs	r3, r3, #3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	3318      	adds	r3, #24
 8001fe8:	443b      	add	r3, r7
 8001fea:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	7dbb      	ldrb	r3, [r7, #22]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	fa42 f303 	asr.w	r3, r2, r3
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <VL53L0X_init+0x19c>
    {
      spads_enabled++;
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	3301      	adds	r3, #1
 8002006:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8002008:	7dbb      	ldrb	r3, [r7, #22]
 800200a:	3301      	adds	r3, #1
 800200c:	75bb      	strb	r3, [r7, #22]
 800200e:	7dbb      	ldrb	r3, [r7, #22]
 8002010:	2b2f      	cmp	r3, #47	; 0x2f
 8002012:	d9bf      	bls.n	8001f94 <VL53L0X_init+0x128>
    }
  }

  VL53L0X_writeMulti(dev, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002014:	f107 020c 	add.w	r2, r7, #12
 8002018:	2306      	movs	r3, #6
 800201a:	21b0      	movs	r1, #176	; 0xb0
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fa83 	bl	8002528 <VL53L0X_writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8002022:	2201      	movs	r2, #1
 8002024:	21ff      	movs	r1, #255	; 0xff
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f9e0 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f9db 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8002036:	2200      	movs	r2, #0
 8002038:	21ff      	movs	r1, #255	; 0xff
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f9d6 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x09, 0x00);
 8002040:	2200      	movs	r2, #0
 8002042:	2109      	movs	r1, #9
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f9d1 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x10, 0x00);
 800204a:	2200      	movs	r2, #0
 800204c:	2110      	movs	r1, #16
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f9cc 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x11, 0x00);
 8002054:	2200      	movs	r2, #0
 8002056:	2111      	movs	r1, #17
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f9c7 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x24, 0x01);
 800205e:	2201      	movs	r2, #1
 8002060:	2124      	movs	r1, #36	; 0x24
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f9c2 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x25, 0xFF);
 8002068:	22ff      	movs	r2, #255	; 0xff
 800206a:	2125      	movs	r1, #37	; 0x25
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f9bd 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x75, 0x00);
 8002072:	2200      	movs	r2, #0
 8002074:	2175      	movs	r1, #117	; 0x75
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f9b8 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 800207c:	2201      	movs	r2, #1
 800207e:	21ff      	movs	r1, #255	; 0xff
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f9b3 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4E, 0x2C);
 8002086:	222c      	movs	r2, #44	; 0x2c
 8002088:	214e      	movs	r1, #78	; 0x4e
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9ae 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x48, 0x00);
 8002090:	2200      	movs	r2, #0
 8002092:	2148      	movs	r1, #72	; 0x48
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f9a9 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x30, 0x20);
 800209a:	2220      	movs	r2, #32
 800209c:	2130      	movs	r1, #48	; 0x30
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f9a4 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 80020a4:	2200      	movs	r2, #0
 80020a6:	21ff      	movs	r1, #255	; 0xff
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f99f 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x30, 0x09);
 80020ae:	2209      	movs	r2, #9
 80020b0:	2130      	movs	r1, #48	; 0x30
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f99a 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x54, 0x00);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2154      	movs	r1, #84	; 0x54
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f995 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x31, 0x04);
 80020c2:	2204      	movs	r2, #4
 80020c4:	2131      	movs	r1, #49	; 0x31
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f990 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x32, 0x03);
 80020cc:	2203      	movs	r2, #3
 80020ce:	2132      	movs	r1, #50	; 0x32
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f98b 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x40, 0x83);
 80020d6:	2283      	movs	r2, #131	; 0x83
 80020d8:	2140      	movs	r1, #64	; 0x40
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f986 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x46, 0x25);
 80020e0:	2225      	movs	r2, #37	; 0x25
 80020e2:	2146      	movs	r1, #70	; 0x46
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f981 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x60, 0x00);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2160      	movs	r1, #96	; 0x60
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f97c 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x27, 0x00);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2127      	movs	r1, #39	; 0x27
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f977 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x50, 0x06);
 80020fe:	2206      	movs	r2, #6
 8002100:	2150      	movs	r1, #80	; 0x50
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f972 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x51, 0x00);
 8002108:	2200      	movs	r2, #0
 800210a:	2151      	movs	r1, #81	; 0x51
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f96d 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x52, 0x96);
 8002112:	2296      	movs	r2, #150	; 0x96
 8002114:	2152      	movs	r1, #82	; 0x52
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f968 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x56, 0x08);
 800211c:	2208      	movs	r2, #8
 800211e:	2156      	movs	r1, #86	; 0x56
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f963 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x57, 0x30);
 8002126:	2230      	movs	r2, #48	; 0x30
 8002128:	2157      	movs	r1, #87	; 0x57
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f95e 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x61, 0x00);
 8002130:	2200      	movs	r2, #0
 8002132:	2161      	movs	r1, #97	; 0x61
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f959 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x62, 0x00);
 800213a:	2200      	movs	r2, #0
 800213c:	2162      	movs	r1, #98	; 0x62
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f954 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x64, 0x00);
 8002144:	2200      	movs	r2, #0
 8002146:	2164      	movs	r1, #100	; 0x64
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f94f 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x65, 0x00);
 800214e:	2200      	movs	r2, #0
 8002150:	2165      	movs	r1, #101	; 0x65
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f94a 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x66, 0xA0);
 8002158:	22a0      	movs	r2, #160	; 0xa0
 800215a:	2166      	movs	r1, #102	; 0x66
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f945 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8002162:	2201      	movs	r2, #1
 8002164:	21ff      	movs	r1, #255	; 0xff
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f940 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x22, 0x32);
 800216c:	2232      	movs	r2, #50	; 0x32
 800216e:	2122      	movs	r1, #34	; 0x22
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f93b 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x47, 0x14);
 8002176:	2214      	movs	r2, #20
 8002178:	2147      	movs	r1, #71	; 0x47
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f936 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x49, 0xFF);
 8002180:	22ff      	movs	r2, #255	; 0xff
 8002182:	2149      	movs	r1, #73	; 0x49
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f931 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4A, 0x00);
 800218a:	2200      	movs	r2, #0
 800218c:	214a      	movs	r1, #74	; 0x4a
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f92c 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8002194:	2200      	movs	r2, #0
 8002196:	21ff      	movs	r1, #255	; 0xff
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f927 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x7A, 0x0A);
 800219e:	220a      	movs	r2, #10
 80021a0:	217a      	movs	r1, #122	; 0x7a
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f922 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x7B, 0x00);
 80021a8:	2200      	movs	r2, #0
 80021aa:	217b      	movs	r1, #123	; 0x7b
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f91d 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x78, 0x21);
 80021b2:	2221      	movs	r2, #33	; 0x21
 80021b4:	2178      	movs	r1, #120	; 0x78
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f918 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 80021bc:	2201      	movs	r2, #1
 80021be:	21ff      	movs	r1, #255	; 0xff
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f913 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x23, 0x34);
 80021c6:	2234      	movs	r2, #52	; 0x34
 80021c8:	2123      	movs	r1, #35	; 0x23
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f90e 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x42, 0x00);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2142      	movs	r1, #66	; 0x42
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f909 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x44, 0xFF);
 80021da:	22ff      	movs	r2, #255	; 0xff
 80021dc:	2144      	movs	r1, #68	; 0x44
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f904 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x45, 0x26);
 80021e4:	2226      	movs	r2, #38	; 0x26
 80021e6:	2145      	movs	r1, #69	; 0x45
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f8ff 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x46, 0x05);
 80021ee:	2205      	movs	r2, #5
 80021f0:	2146      	movs	r1, #70	; 0x46
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f8fa 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x40, 0x40);
 80021f8:	2240      	movs	r2, #64	; 0x40
 80021fa:	2140      	movs	r1, #64	; 0x40
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f8f5 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x0E, 0x06);
 8002202:	2206      	movs	r2, #6
 8002204:	210e      	movs	r1, #14
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8f0 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x20, 0x1A);
 800220c:	221a      	movs	r2, #26
 800220e:	2120      	movs	r1, #32
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f8eb 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x43, 0x40);
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	2143      	movs	r1, #67	; 0x43
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8e6 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8002220:	2200      	movs	r2, #0
 8002222:	21ff      	movs	r1, #255	; 0xff
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f8e1 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x34, 0x03);
 800222a:	2203      	movs	r2, #3
 800222c:	2134      	movs	r1, #52	; 0x34
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f8dc 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x35, 0x44);
 8002234:	2244      	movs	r2, #68	; 0x44
 8002236:	2135      	movs	r1, #53	; 0x35
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f8d7 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 800223e:	2201      	movs	r2, #1
 8002240:	21ff      	movs	r1, #255	; 0xff
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f8d2 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x31, 0x04);
 8002248:	2204      	movs	r2, #4
 800224a:	2131      	movs	r1, #49	; 0x31
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f8cd 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4B, 0x09);
 8002252:	2209      	movs	r2, #9
 8002254:	214b      	movs	r1, #75	; 0x4b
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8c8 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4C, 0x05);
 800225c:	2205      	movs	r2, #5
 800225e:	214c      	movs	r1, #76	; 0x4c
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8c3 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4D, 0x04);
 8002266:	2204      	movs	r2, #4
 8002268:	214d      	movs	r1, #77	; 0x4d
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8be 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8002270:	2200      	movs	r2, #0
 8002272:	21ff      	movs	r1, #255	; 0xff
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f8b9 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x44, 0x00);
 800227a:	2200      	movs	r2, #0
 800227c:	2144      	movs	r1, #68	; 0x44
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f8b4 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x45, 0x20);
 8002284:	2220      	movs	r2, #32
 8002286:	2145      	movs	r1, #69	; 0x45
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f8af 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x47, 0x08);
 800228e:	2208      	movs	r2, #8
 8002290:	2147      	movs	r1, #71	; 0x47
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f8aa 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x48, 0x28);
 8002298:	2228      	movs	r2, #40	; 0x28
 800229a:	2148      	movs	r1, #72	; 0x48
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8a5 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x67, 0x00);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2167      	movs	r1, #103	; 0x67
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f8a0 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x70, 0x04);
 80022ac:	2204      	movs	r2, #4
 80022ae:	2170      	movs	r1, #112	; 0x70
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f89b 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x71, 0x01);
 80022b6:	2201      	movs	r2, #1
 80022b8:	2171      	movs	r1, #113	; 0x71
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f896 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x72, 0xFE);
 80022c0:	22fe      	movs	r2, #254	; 0xfe
 80022c2:	2172      	movs	r1, #114	; 0x72
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f891 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x76, 0x00);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2176      	movs	r1, #118	; 0x76
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f88c 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x77, 0x00);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2177      	movs	r1, #119	; 0x77
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f887 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 80022de:	2201      	movs	r2, #1
 80022e0:	21ff      	movs	r1, #255	; 0xff
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f882 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x0D, 0x01);
 80022e8:	2201      	movs	r2, #1
 80022ea:	210d      	movs	r1, #13
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f87d 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 80022f2:	2200      	movs	r2, #0
 80022f4:	21ff      	movs	r1, #255	; 0xff
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f878 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x01);
 80022fc:	2201      	movs	r2, #1
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f873 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x01, 0xF8);
 8002306:	22f8      	movs	r2, #248	; 0xf8
 8002308:	2101      	movs	r1, #1
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f86e 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8002310:	2201      	movs	r2, #1
 8002312:	21ff      	movs	r1, #255	; 0xff
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f869 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x8E, 0x01);
 800231a:	2201      	movs	r2, #1
 800231c:	218e      	movs	r1, #142	; 0x8e
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f864 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8002324:	2201      	movs	r2, #1
 8002326:	2100      	movs	r1, #0
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f85f 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 800232e:	2200      	movs	r2, #0
 8002330:	21ff      	movs	r1, #255	; 0xff
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f85a 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8002338:	2200      	movs	r2, #0
 800233a:	2180      	movs	r1, #128	; 0x80
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f855 	bl	80023ec <VL53L0X_writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8002342:	2204      	movs	r2, #4
 8002344:	210a      	movs	r1, #10
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f850 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, GPIO_HV_MUX_ACTIVE_HIGH, VL53L0X_readReg(dev,  GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800234c:	2184      	movs	r1, #132	; 0x84
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f8ac 	bl	80024ac <VL53L0X_readReg>
 8002354:	4603      	mov	r3, r0
 8002356:	f023 0310 	bic.w	r3, r3, #16
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	2184      	movs	r1, #132	; 0x84
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f843 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002366:	2201      	movs	r2, #1
 8002368:	210b      	movs	r1, #11
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f83e 	bl	80023ec <VL53L0X_writeReg>

  // -- VL53L0X_SetGpioConfig() end

  dev->measurement_timing_budget_us = VL53L0X_getMeasurementTimingBudget(dev);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f9bc 	bl	80026ee <VL53L0X_getMeasurementTimingBudget>
 8002376:	4602      	mov	r2, r0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	615a      	str	r2, [r3, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800237c:	22e8      	movs	r2, #232	; 0xe8
 800237e:	2101      	movs	r1, #1
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f833 	bl	80023ec <VL53L0X_writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
 VL53L0X_setMeasurementTimingBudget(dev, dev->measurement_timing_budget_us);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f915 	bl	80025bc <VL53L0X_setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x01);
 8002392:	2201      	movs	r2, #1
 8002394:	2101      	movs	r1, #1
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f828 	bl	80023ec <VL53L0X_writeReg>
  if (!VL53L0X_performSingleRefCalibration(dev, 0x40)) { return false; }
 800239c:	2140      	movs	r1, #64	; 0x40
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fc78 	bl	8002c94 <VL53L0X_performSingleRefCalibration>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <VL53L0X_init+0x548>
 80023b0:	2300      	movs	r3, #0
 80023b2:	e016      	b.n	80023e2 <VL53L0X_init+0x576>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x02);
 80023b4:	2202      	movs	r2, #2
 80023b6:	2101      	movs	r1, #1
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f817 	bl	80023ec <VL53L0X_writeReg>
  if (!VL53L0X_performSingleRefCalibration(dev, 0x00)) { return false; }
 80023be:	2100      	movs	r1, #0
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fc67 	bl	8002c94 <VL53L0X_performSingleRefCalibration>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <VL53L0X_init+0x56a>
 80023d2:	2300      	movs	r3, #0
 80023d4:	e005      	b.n	80023e2 <VL53L0X_init+0x576>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80023d6:	22e8      	movs	r2, #232	; 0xe8
 80023d8:	2101      	movs	r1, #1
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f806 	bl	80023ec <VL53L0X_writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop

080023ec <VL53L0X_writeReg>:

// Write an 8-bit register
void VL53L0X_writeReg(struct VL53L0X* dev, uint8_t reg, uint8_t value)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
 80023f8:	4613      	mov	r3, r2
 80023fa:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = reg;
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8002400:	78bb      	ldrb	r3, [r7, #2]
 8002402:	737b      	strb	r3, [r7, #13]
	i2c_write(I2C1, 0b0101001, buf, 2);
 8002404:	f107 020c 	add.w	r2, r7, #12
 8002408:	2302      	movs	r3, #2
 800240a:	2129      	movs	r1, #41	; 0x29
 800240c:	4803      	ldr	r0, [pc, #12]	; (800241c <VL53L0X_writeReg+0x30>)
 800240e:	f001 fcf9 	bl	8003e04 <i2c_write>
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40005400 	.word	0x40005400

08002420 <VL53L0X_writeReg16Bit>:

// Write a 16-bit register
void VL53L0X_writeReg16Bit(struct VL53L0X* dev, uint8_t reg, uint16_t value)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
 800242c:	4613      	mov	r3, r2
 800242e:	803b      	strh	r3, [r7, #0]
	uint8_t buf[3];
	buf[0] = reg;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) (value >> 8);
 8002434:	883b      	ldrh	r3, [r7, #0]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	b29b      	uxth	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (value & 0xFF);
 800243e:	883b      	ldrh	r3, [r7, #0]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	73bb      	strb	r3, [r7, #14]
	i2c_write(I2C1, 0b0101001, buf, 3);
 8002444:	f107 020c 	add.w	r2, r7, #12
 8002448:	2303      	movs	r3, #3
 800244a:	2129      	movs	r1, #41	; 0x29
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <VL53L0X_writeReg16Bit+0x3c>)
 800244e:	f001 fcd9 	bl	8003e04 <i2c_write>
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40005400 	.word	0x40005400

08002460 <VL53L0X_writeReg32Bit>:

// Write a 32-bit register
void VL53L0X_writeReg32Bit(struct VL53L0X* dev, uint8_t reg, uint32_t value)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	460b      	mov	r3, r1
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[5];
	buf[0] = reg;
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	743b      	strb	r3, [r7, #16]
	buf[1] = (uint8_t) (value >> 24);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0e1b      	lsrs	r3, r3, #24
 8002476:	b2db      	uxtb	r3, r3
 8002478:	747b      	strb	r3, [r7, #17]
	buf[2] = (uint8_t) (value >> 16);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	b2db      	uxtb	r3, r3
 8002480:	74bb      	strb	r3, [r7, #18]
	buf[3] = (uint8_t) (value >> 8);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	b2db      	uxtb	r3, r3
 8002488:	74fb      	strb	r3, [r7, #19]
	buf[4] = (uint8_t) (value & 0xFF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	753b      	strb	r3, [r7, #20]
	i2c_write(I2C1, 0b0101001, buf, 5);
 8002490:	f107 0210 	add.w	r2, r7, #16
 8002494:	2305      	movs	r3, #5
 8002496:	2129      	movs	r1, #41	; 0x29
 8002498:	4803      	ldr	r0, [pc, #12]	; (80024a8 <VL53L0X_writeReg32Bit+0x48>)
 800249a:	f001 fcb3 	bl	8003e04 <i2c_write>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40005400 	.word	0x40005400

080024ac <VL53L0X_readReg>:

// Read an 8-bit register
uint8_t VL53L0X_readReg(struct VL53L0X* dev, uint8_t reg)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
  uint8_t value;
  i2c_write(I2C1, 0b0101001, &reg, 1);
 80024b8:	1cfa      	adds	r2, r7, #3
 80024ba:	2301      	movs	r3, #1
 80024bc:	2129      	movs	r1, #41	; 0x29
 80024be:	4807      	ldr	r0, [pc, #28]	; (80024dc <VL53L0X_readReg+0x30>)
 80024c0:	f001 fca0 	bl	8003e04 <i2c_write>
  i2c_read(I2C1, 0b0101001, &value, 1);
 80024c4:	f107 020f 	add.w	r2, r7, #15
 80024c8:	2301      	movs	r3, #1
 80024ca:	2129      	movs	r1, #41	; 0x29
 80024cc:	4803      	ldr	r0, [pc, #12]	; (80024dc <VL53L0X_readReg+0x30>)
 80024ce:	f001 fc3b 	bl	8003d48 <i2c_read>
  return value;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40005400 	.word	0x40005400

080024e0 <VL53L0X_readReg16Bit>:

// Read a 16-bit register
uint16_t VL53L0X_readReg16Bit(struct VL53L0X* dev, uint8_t reg)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
  uint16_t value;
  uint8_t buf[2];
  i2c_write(I2C1, 0b0101001, &reg, 1);
 80024ec:	1cfa      	adds	r2, r7, #3
 80024ee:	2301      	movs	r3, #1
 80024f0:	2129      	movs	r1, #41	; 0x29
 80024f2:	480c      	ldr	r0, [pc, #48]	; (8002524 <VL53L0X_readReg16Bit+0x44>)
 80024f4:	f001 fc86 	bl	8003e04 <i2c_write>
  i2c_read(I2C1, 0b0101001, buf, 2);
 80024f8:	f107 020c 	add.w	r2, r7, #12
 80024fc:	2302      	movs	r3, #2
 80024fe:	2129      	movs	r1, #41	; 0x29
 8002500:	4808      	ldr	r0, [pc, #32]	; (8002524 <VL53L0X_readReg16Bit+0x44>)
 8002502:	f001 fc21 	bl	8003d48 <i2c_read>
  value = (uint16_t) (buf[0] << 8);
 8002506:	7b3b      	ldrb	r3, [r7, #12]
 8002508:	b29b      	uxth	r3, r3
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	81fb      	strh	r3, [r7, #14]
  value |= (uint16_t) buf[1];
 800250e:	7b7b      	ldrb	r3, [r7, #13]
 8002510:	b29a      	uxth	r2, r3
 8002512:	89fb      	ldrh	r3, [r7, #14]
 8002514:	4313      	orrs	r3, r2
 8002516:	81fb      	strh	r3, [r7, #14]
  return value;
 8002518:	89fb      	ldrh	r3, [r7, #14]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40005400 	.word	0x40005400

08002528 <VL53L0X_writeMulti>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X_writeMulti(struct VL53L0X* dev, uint8_t reg, uint8_t* src, uint8_t count)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	461a      	mov	r2, r3
 8002534:	460b      	mov	r3, r1
 8002536:	72fb      	strb	r3, [r7, #11]
 8002538:	4613      	mov	r3, r2
 800253a:	72bb      	strb	r3, [r7, #10]
	i2c_write(I2C1, 0b0101001, &reg, 1);
 800253c:	f107 020b 	add.w	r2, r7, #11
 8002540:	2301      	movs	r3, #1
 8002542:	2129      	movs	r1, #41	; 0x29
 8002544:	4806      	ldr	r0, [pc, #24]	; (8002560 <VL53L0X_writeMulti+0x38>)
 8002546:	f001 fc5d 	bl	8003e04 <i2c_write>
	i2c_write(I2C1, 0b0101001, src, count);
 800254a:	7abb      	ldrb	r3, [r7, #10]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	2129      	movs	r1, #41	; 0x29
 8002550:	4803      	ldr	r0, [pc, #12]	; (8002560 <VL53L0X_writeMulti+0x38>)
 8002552:	f001 fc57 	bl	8003e04 <i2c_write>
}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40005400 	.word	0x40005400

08002564 <VL53L0X_readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X_readMulti(struct VL53L0X* dev, uint8_t reg, uint8_t * dst, uint8_t count)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	461a      	mov	r2, r3
 8002570:	460b      	mov	r3, r1
 8002572:	72fb      	strb	r3, [r7, #11]
 8002574:	4613      	mov	r3, r2
 8002576:	72bb      	strb	r3, [r7, #10]
	i2c_write(I2C1, 0b0101001, &reg, 1);
 8002578:	f107 020b 	add.w	r2, r7, #11
 800257c:	2301      	movs	r3, #1
 800257e:	2129      	movs	r1, #41	; 0x29
 8002580:	4806      	ldr	r0, [pc, #24]	; (800259c <VL53L0X_readMulti+0x38>)
 8002582:	f001 fc3f 	bl	8003e04 <i2c_write>
	i2c_read(I2C1, 0b0101001, dst, count);
 8002586:	7abb      	ldrb	r3, [r7, #10]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	2129      	movs	r1, #41	; 0x29
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <VL53L0X_readMulti+0x38>)
 800258e:	f001 fbdb 	bl	8003d48 <i2c_read>
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40005400 	.word	0x40005400

080025a0 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X_setSignalRateLimit(struct VL53L0X* dev)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, (1 << 7) / 4);
 80025a8:	2220      	movs	r2, #32
 80025aa:	2144      	movs	r1, #68	; 0x44
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff37 	bl	8002420 <VL53L0X_writeReg16Bit>
  return true;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <VL53L0X_setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X_setMeasurementTimingBudget(struct VL53L0X* dev, uint32_t budget_us)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b092      	sub	sp, #72	; 0x48
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  struct VL53L0X_SequenceStepEnables enables;
  struct VL53L0X_SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80025c6:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80025ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 80025ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80025d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 80025d4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80025d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 80025da:	f240 234e 	movw	r3, #590	; 0x24e
 80025de:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 80025e0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80025e4:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 80025e6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80025ea:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 80025ec:	f240 2326 	movw	r3, #550	; 0x226
 80025f0:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 80025f2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d201      	bcs.n	8002604 <VL53L0X_setMeasurementTimingBudget+0x48>
 8002600:	2300      	movs	r3, #0
 8002602:	e070      	b.n	80026e6 <VL53L0X_setMeasurementTimingBudget+0x12a>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8002604:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002608:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800260a:	4413      	add	r3, r2
 800260c:	647b      	str	r3, [r7, #68]	; 0x44

  VL53L0X_getSequenceStepEnables(dev, &enables);
 800260e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f9f9 	bl	8002a0c <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 800261a:	f107 020c 	add.w	r2, r7, #12
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fa3c 	bl	8002aa2 <VL53L0X_getSequenceStepTimeouts>

  if (enables.tcc)
 800262a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <VL53L0X_setMeasurementTimingBudget+0x82>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002636:	4413      	add	r3, r2
 8002638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800263a:	4413      	add	r3, r2
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 800263e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <VL53L0X_setMeasurementTimingBudget+0x9a>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800264a:	4413      	add	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002650:	4413      	add	r3, r2
 8002652:	647b      	str	r3, [r7, #68]	; 0x44
 8002654:	e009      	b.n	800266a <VL53L0X_setMeasurementTimingBudget+0xae>
  }
  else if (enables.msrc)
 8002656:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <VL53L0X_setMeasurementTimingBudget+0xae>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002662:	4413      	add	r3, r2
 8002664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002666:	4413      	add	r3, r2
 8002668:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 800266a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <VL53L0X_setMeasurementTimingBudget+0xc2>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002676:	4413      	add	r3, r2
 8002678:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800267a:	4413      	add	r3, r2
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 800267e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02e      	beq.n	80026e4 <VL53L0X_setMeasurementTimingBudget+0x128>
  {
    used_budget_us += FinalRangeOverhead;
 8002686:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800268a:	4413      	add	r3, r2
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 800268e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d901      	bls.n	800269a <VL53L0X_setMeasurementTimingBudget+0xde>
    {
      // "Requested timeout too big."
      return false;
 8002696:	2300      	movs	r3, #0
 8002698:	e025      	b.n	80026e6 <VL53L0X_setMeasurementTimingBudget+0x12a>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    // "For the final range timeout, the pre-range timeout
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 80026a2:	89fb      	ldrh	r3, [r7, #14]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4619      	mov	r1, r3
 80026a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026aa:	f000 facd 	bl	8002c48 <VL53L0X_timeoutMicrosecondsToMclks>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 80026b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <VL53L0X_setMeasurementTimingBudget+0x10c>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80026bc:	8a7a      	ldrh	r2, [r7, #18]
 80026be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80026c2:	4413      	add	r3, r2
 80026c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(final_range_timeout_mclks));
 80026c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fa67 	bl	8002ba0 <VL53L0X_encodeTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	2171      	movs	r1, #113	; 0x71
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff fea1 	bl	8002420 <VL53L0X_writeReg16Bit>

    // set_sequence_step_timeout() end

    dev->measurement_timing_budget_us = budget_us; // store for internal reuse
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	615a      	str	r2, [r3, #20]
  }
  return true;
 80026e4:	2301      	movs	r3, #1
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3748      	adds	r7, #72	; 0x48
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <VL53L0X_getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X_getMeasurementTimingBudget(struct VL53L0X* dev)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b08e      	sub	sp, #56	; 0x38
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  struct VL53L0X_SequenceStepEnables enables;
  struct VL53L0X_SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80026f6:	f240 7376 	movw	r3, #1910	; 0x776
 80026fa:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const EndOverhead        = 960;
 80026fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002700:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const MsrcOverhead       = 660;
 8002702:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002706:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const TccOverhead        = 590;
 8002708:	f240 234e 	movw	r3, #590	; 0x24e
 800270c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t const DssOverhead        = 690;
 800270e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002712:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const PreRangeOverhead   = 660;
 8002714:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002718:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const FinalRangeOverhead = 550;
 800271a:	f240 2326 	movw	r3, #550	; 0x226
 800271e:	84fb      	strh	r3, [r7, #38]	; 0x26

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8002720:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002722:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002724:	4413      	add	r3, r2
 8002726:	637b      	str	r3, [r7, #52]	; 0x34

  VL53L0X_getSequenceStepEnables(dev, &enables);
 8002728:	f107 0320 	add.w	r3, r7, #32
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f96c 	bl	8002a0c <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 8002734:	f107 0208 	add.w	r2, r7, #8
 8002738:	f107 0320 	add.w	r3, r7, #32
 800273c:	4619      	mov	r1, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f9af 	bl	8002aa2 <VL53L0X_getSequenceStepTimeouts>

  if (enables.tcc)
 8002744:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <VL53L0X_getMeasurementTimingBudget+0x6a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002750:	4413      	add	r3, r2
 8002752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002754:	4413      	add	r3, r2
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.dss)
 8002758:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <VL53L0X_getMeasurementTimingBudget+0x82>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002764:	4413      	add	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800276a:	4413      	add	r3, r2
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
 800276e:	e009      	b.n	8002784 <VL53L0X_getMeasurementTimingBudget+0x96>
  }
  else if (enables.msrc)
 8002770:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <VL53L0X_getMeasurementTimingBudget+0x96>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800277c:	4413      	add	r3, r2
 800277e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002780:	4413      	add	r3, r2
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.pre_range)
 8002784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <VL53L0X_getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002790:	4413      	add	r3, r2
 8002792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002794:	4413      	add	r3, r2
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.final_range)
 8002798:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <VL53L0X_getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027a4:	4413      	add	r3, r2
 80027a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027a8:	4413      	add	r3, r2
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  dev->measurement_timing_budget_us = budget_us; // store for internal reuse
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027b0:	615a      	str	r2, [r3, #20]
  return budget_us;
 80027b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3738      	adds	r7, #56	; 0x38
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <VL53L0X_getVcselPulsePeriod>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X_getVcselPulsePeriod(struct VL53L0X* dev, enum VL53L0X_vcselPeriodType type)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
  if (type == VcselPeriodPreRange)
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <VL53L0X_getVcselPulsePeriod+0x26>
  {
    return decodeVcselPeriod(VL53L0X_readReg(dev,  PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80027ce:	2150      	movs	r1, #80	; 0x50
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fe6b 	bl	80024ac <VL53L0X_readReg>
 80027d6:	4603      	mov	r3, r0
 80027d8:	3301      	adds	r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	e00d      	b.n	80027fe <VL53L0X_getVcselPulsePeriod+0x42>
  }
  else if (type == VcselPeriodFinalRange)
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d109      	bne.n	80027fc <VL53L0X_getVcselPulsePeriod+0x40>
  {
    return decodeVcselPeriod(VL53L0X_readReg(dev,  FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80027e8:	2170      	movs	r1, #112	; 0x70
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fe5e 	bl	80024ac <VL53L0X_readReg>
 80027f0:	4603      	mov	r3, r0
 80027f2:	3301      	adds	r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	e000      	b.n	80027fe <VL53L0X_getVcselPulsePeriod+0x42>
  }
  else { return 255; }
 80027fc:	23ff      	movs	r3, #255	; 0xff
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <VL53L0X_startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X_startContinuous(struct VL53L0X* dev, uint32_t period_ms)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  VL53L0X_writeReg(dev, 0x80, 0x01);
 8002810:	2201      	movs	r2, #1
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff fde9 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 800281a:	2201      	movs	r2, #1
 800281c:	21ff      	movs	r1, #255	; 0xff
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fde4 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8002824:	2200      	movs	r2, #0
 8002826:	2100      	movs	r1, #0
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fddf 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x91, dev->stop_variable);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7c1b      	ldrb	r3, [r3, #16]
 8002832:	461a      	mov	r2, r3
 8002834:	2191      	movs	r1, #145	; 0x91
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fdd8 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 800283c:	2201      	movs	r2, #1
 800283e:	2100      	movs	r1, #0
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff fdd3 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8002846:	2200      	movs	r2, #0
 8002848:	21ff      	movs	r1, #255	; 0xff
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff fdce 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8002850:	2200      	movs	r2, #0
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff fdc9 	bl	80023ec <VL53L0X_writeReg>

  if (period_ms != 0)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d018      	beq.n	8002892 <VL53L0X_startContinuous+0x8c>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = VL53L0X_readReg16Bit(dev, OSC_CALIBRATE_VAL);
 8002860:	21f8      	movs	r1, #248	; 0xf8
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fe3c 	bl	80024e0 <VL53L0X_readReg16Bit>
 8002868:	4603      	mov	r3, r0
 800286a:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 800286c:	89fb      	ldrh	r3, [r7, #14]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <VL53L0X_startContinuous+0x76>
    {
      period_ms *= osc_calibrate_val;
 8002872:	89fa      	ldrh	r2, [r7, #14]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	603b      	str	r3, [r7, #0]
    }

    VL53L0X_writeReg32Bit(dev, SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	2104      	movs	r1, #4
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff fded 	bl	8002460 <VL53L0X_writeReg32Bit>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    VL53L0X_writeReg(dev, SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8002886:	2204      	movs	r2, #4
 8002888:	2100      	movs	r1, #0
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff fdae 	bl	80023ec <VL53L0X_writeReg>
  else
  {
    // continuous back-to-back mode
    VL53L0X_writeReg(dev, SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8002890:	e004      	b.n	800289c <VL53L0X_startContinuous+0x96>
    VL53L0X_writeReg(dev, SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8002892:	2202      	movs	r2, #2
 8002894:	2100      	movs	r1, #0
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fda8 	bl	80023ec <VL53L0X_writeReg>
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <VL53L0X_readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X_readRangeContinuousMillimeters(struct VL53L0X* dev)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  //   }
  // }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = VL53L0X_readReg16Bit(dev, RESULT_RANGE_STATUS + 10);
 80028ac:	211e      	movs	r1, #30
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fe16 	bl	80024e0 <VL53L0X_readReg16Bit>
 80028b4:	4603      	mov	r3, r0
 80028b6:	81fb      	strh	r3, [r7, #14]

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80028b8:	2201      	movs	r2, #1
 80028ba:	210b      	movs	r1, #11
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff fd95 	bl	80023ec <VL53L0X_writeReg>

  return range;
 80028c2:	89fb      	ldrh	r3, [r7, #14]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <VL53L0X_getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X_getSpadInfo(struct VL53L0X* dev, uint8_t * count, bool * type_is_aperture)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint8_t tmp;

  VL53L0X_writeReg(dev, 0x80, 0x01);
 80028d8:	2201      	movs	r2, #1
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f7ff fd85 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 80028e2:	2201      	movs	r2, #1
 80028e4:	21ff      	movs	r1, #255	; 0xff
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff fd80 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff fd7b 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x06);
 80028f6:	2206      	movs	r2, #6
 80028f8:	21ff      	movs	r1, #255	; 0xff
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff fd76 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, VL53L0X_readReg(dev,  0x83) | 0x04);
 8002900:	2183      	movs	r1, #131	; 0x83
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7ff fdd2 	bl	80024ac <VL53L0X_readReg>
 8002908:	4603      	mov	r3, r0
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	2183      	movs	r1, #131	; 0x83
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f7ff fd69 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x07);
 800291a:	2207      	movs	r2, #7
 800291c:	21ff      	movs	r1, #255	; 0xff
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff fd64 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x81, 0x01);
 8002924:	2201      	movs	r2, #1
 8002926:	2181      	movs	r1, #129	; 0x81
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff fd5f 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x80, 0x01);
 800292e:	2201      	movs	r2, #1
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f7ff fd5a 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x94, 0x6b);
 8002938:	226b      	movs	r2, #107	; 0x6b
 800293a:	2194      	movs	r1, #148	; 0x94
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff fd55 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, 0x00);
 8002942:	2200      	movs	r2, #0
 8002944:	2183      	movs	r1, #131	; 0x83
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff fd50 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_startTimeout(dev);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f9d4 	bl	8002cfa <VL53L0X_startTimeout>
  while (VL53L0X_readReg(dev,  0x83) == 0x00)
 8002952:	e007      	b.n	8002964 <VL53L0X_getSpadInfo+0x98>
  {
    if (VL53L0X_checkTimeoutExpired(dev)) { return false; }
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f9d9 	bl	8002d0c <VL53L0X_checkTimeoutExpired>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <VL53L0X_getSpadInfo+0x98>
 8002960:	2300      	movs	r3, #0
 8002962:	e04f      	b.n	8002a04 <VL53L0X_getSpadInfo+0x138>
  while (VL53L0X_readReg(dev,  0x83) == 0x00)
 8002964:	2183      	movs	r1, #131	; 0x83
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f7ff fda0 	bl	80024ac <VL53L0X_readReg>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <VL53L0X_getSpadInfo+0x88>
  }
  VL53L0X_writeReg(dev, 0x83, 0x01);
 8002972:	2201      	movs	r2, #1
 8002974:	2183      	movs	r1, #131	; 0x83
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff fd38 	bl	80023ec <VL53L0X_writeReg>
  tmp = VL53L0X_readReg(dev,  0x92);
 800297c:	2192      	movs	r1, #146	; 0x92
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff fd94 	bl	80024ac <VL53L0X_readReg>
 8002984:	4603      	mov	r3, r0
 8002986:	75fb      	strb	r3, [r7, #23]

  *count = tmp & 0x7f;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	09db      	lsrs	r3, r3, #7
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	701a      	strb	r2, [r3, #0]

  VL53L0X_writeReg(dev, 0x81, 0x00);
 80029ac:	2200      	movs	r2, #0
 80029ae:	2181      	movs	r1, #129	; 0x81
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff fd1b 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x06);
 80029b6:	2206      	movs	r2, #6
 80029b8:	21ff      	movs	r1, #255	; 0xff
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f7ff fd16 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, VL53L0X_readReg(dev,  0x83)  & ~0x04);
 80029c0:	2183      	movs	r1, #131	; 0x83
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f7ff fd72 	bl	80024ac <VL53L0X_readReg>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f023 0304 	bic.w	r3, r3, #4
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	2183      	movs	r1, #131	; 0x83
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7ff fd09 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 80029da:	2201      	movs	r2, #1
 80029dc:	21ff      	movs	r1, #255	; 0xff
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff fd04 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 80029e4:	2201      	movs	r2, #1
 80029e6:	2100      	movs	r1, #0
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7ff fcff 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 80029ee:	2200      	movs	r2, #0
 80029f0:	21ff      	movs	r1, #255	; 0xff
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff fcfa 	bl	80023ec <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7ff fcf5 	bl	80023ec <VL53L0X_writeReg>

  return true;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <VL53L0X_getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X_getSequenceStepEnables(struct VL53L0X* dev, struct VL53L0X_SequenceStepEnables* enables)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = VL53L0X_readReg(dev,  SYSTEM_SEQUENCE_CONFIG);
 8002a16:	2101      	movs	r1, #1
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fd47 	bl	80024ac <VL53L0X_readReg>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf14      	ite	ne
 8002a60:	2301      	movne	r3, #1
 8002a62:	2300      	moveq	r3, #0
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf14      	ite	ne
 8002a78:	2301      	movne	r3, #1
 8002a7a:	2300      	moveq	r3, #0
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	09db      	lsrs	r3, r3, #7
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	711a      	strb	r2, [r3, #4]
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <VL53L0X_getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X_getSequenceStepTimeouts(struct VL53L0X* dev, struct VL53L0X_SequenceStepEnables* enables, struct VL53L0X_SequenceStepTimeouts* timeouts)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(dev, VcselPeriodPreRange);
 8002aae:	2100      	movs	r1, #0
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff fe83 	bl	80027bc <VL53L0X_getVcselPulsePeriod>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = VL53L0X_readReg(dev,  MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8002abe:	2146      	movs	r1, #70	; 0x46
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f7ff fcf3 	bl	80024ac <VL53L0X_readReg>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3301      	adds	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks, timeouts->pre_range_vcsel_period_pclks);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	889a      	ldrh	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f000 f88a 	bl	8002bf8 <VL53L0X_timeoutMclksToMicroseconds>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks = VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(dev, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8002aea:	2151      	movs	r1, #81	; 0x51
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff fcf7 	bl	80024e0 <VL53L0X_readReg16Bit>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 f840 	bl	8002b7a <VL53L0X_decodeTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->pre_range_mclks, timeouts->pre_range_vcsel_period_pclks);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	88da      	ldrh	r2, [r3, #6]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f000 f872 	bl	8002bf8 <VL53L0X_timeoutMclksToMicroseconds>
 8002b14:	4602      	mov	r2, r0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(dev, VcselPeriodFinalRange);
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff fe4d 	bl	80027bc <VL53L0X_getVcselPulsePeriod>
 8002b22:	4603      	mov	r3, r0
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks = VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8002b2a:	2171      	movs	r1, #113	; 0x71
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff fcd7 	bl	80024e0 <VL53L0X_readReg16Bit>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f820 	bl	8002b7a <VL53L0X_decodeTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	78db      	ldrb	r3, [r3, #3]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <VL53L0X_getSequenceStepTimeouts+0xb8>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	891a      	ldrh	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	88db      	ldrh	r3, [r3, #6]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->final_range_mclks, timeouts->final_range_vcsel_period_pclks);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	891a      	ldrh	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	885b      	ldrh	r3, [r3, #2]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f000 f846 	bl	8002bf8 <VL53L0X_timeoutMclksToMicroseconds>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	615a      	str	r2, [r3, #20]
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <VL53L0X_decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X_decodeTimeout(uint16_t reg_val)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	0a12      	lsrs	r2, r2, #8
 8002b8c:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8002b8e:	4093      	lsls	r3, r2
 8002b90:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002b92:	3301      	adds	r3, #1
 8002b94:	b29b      	uxth	r3, r3
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <VL53L0X_encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t VL53L0X_encodeTimeout(uint16_t timeout_mclks)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d018      	beq.n	8002bea <VL53L0X_encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8002bbe:	e005      	b.n	8002bcc <VL53L0X_encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8002bc6:	897b      	ldrh	r3, [r7, #10]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f4      	bne.n	8002bc0 <VL53L0X_encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4313      	orrs	r3, r2
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	e000      	b.n	8002bec <VL53L0X_encodeTimeout+0x4c>
  }
  else { return 0; }
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
	...

08002bf8 <VL53L0X_timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X_timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	460a      	mov	r2, r1
 8002c02:	80fb      	strh	r3, [r7, #6]
 8002c04:	4613      	mov	r3, r2
 8002c06:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002c08:	797b      	ldrb	r3, [r7, #5]
 8002c0a:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <VL53L0X_timeoutMclksToMicroseconds+0x48>)
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002c14:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <VL53L0X_timeoutMclksToMicroseconds+0x4c>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	099b      	lsrs	r3, r3, #6
 8002c1c:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	fb03 f202 	mul.w	r2, r3, r2
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <VL53L0X_timeoutMclksToMicroseconds+0x4c>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	099b      	lsrs	r3, r3, #6
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	003a2f00 	.word	0x003a2f00
 8002c44:	10624dd3 	.word	0x10624dd3

08002c48 <VL53L0X_timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X_timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <VL53L0X_timeoutMicrosecondsToMclks+0x44>)
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002c60:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <VL53L0X_timeoutMicrosecondsToMclks+0x48>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c70:	fb03 f202 	mul.w	r2, r3, r2
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	441a      	add	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	003a2f00 	.word	0x003a2f00
 8002c90:	10624dd3 	.word	0x10624dd3

08002c94 <VL53L0X_performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X_performSingleRefCalibration(struct VL53L0X* dev, uint8_t vhv_init_byte)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
  VL53L0X_writeReg(dev, SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2100      	movs	r1, #0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff fb9d 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_startTimeout(dev);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f821 	bl	8002cfa <VL53L0X_startTimeout>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002cb8:	e007      	b.n	8002cca <VL53L0X_performSingleRefCalibration+0x36>
  {
    if (VL53L0X_checkTimeoutExpired(dev)) { return false; }
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f826 	bl	8002d0c <VL53L0X_checkTimeoutExpired>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <VL53L0X_performSingleRefCalibration+0x36>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e013      	b.n	8002cf2 <VL53L0X_performSingleRefCalibration+0x5e>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002cca:	2113      	movs	r1, #19
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff fbed 	bl	80024ac <VL53L0X_readReg>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ee      	beq.n	8002cba <VL53L0X_performSingleRefCalibration+0x26>
  }

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002cdc:	2201      	movs	r2, #1
 8002cde:	210b      	movs	r1, #11
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff fb83 	bl	80023ec <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, SYSRANGE_START, 0x00);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fb7e 	bl	80023ec <VL53L0X_writeReg>

  return true;
 8002cf0:	2301      	movs	r3, #1
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <VL53L0X_startTimeout>:


void VL53L0X_startTimeout(struct VL53L0X* dev){
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
	//dev->timeout_start_ms = os_current_millis();
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <VL53L0X_checkTimeoutExpired>:

bool VL53L0X_checkTimeoutExpired(struct VL53L0X* dev){
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	return 0;//(dev->io_timeout > 0 && (os_current_millis() - dev->timeout_start_ms) > dev->io_timeout);
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <MX_GPIO_Init>:
Sensor de distância:
    SCL: B6
    SDA: B7 */

void MX_GPIO_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <MX_GPIO_Init+0x74>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <MX_GPIO_Init+0x74>)
 8002d3a:	f043 0308 	orr.w	r3, r3, #8
 8002d3e:	6193      	str	r3, [r2, #24]
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <MX_GPIO_Init+0x74>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <MX_GPIO_Init+0x74>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	4a10      	ldr	r2, [pc, #64]	; (8002d94 <MX_GPIO_Init+0x74>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6193      	str	r3, [r2, #24]
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <MX_GPIO_Init+0x74>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = Button_Pin;
 8002d64:	2301      	movs	r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <MX_GPIO_Init+0x78>)
 8002d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002d70:	f107 0308 	add.w	r3, r7, #8
 8002d74:	4619      	mov	r1, r3
 8002d76:	4809      	ldr	r0, [pc, #36]	; (8002d9c <MX_GPIO_Init+0x7c>)
 8002d78:	f7fd ffcc 	bl	8000d14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1U, 1U);
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	2101      	movs	r1, #1
 8002d80:	2006      	movs	r0, #6
 8002d82:	f7fd ff9d 	bl	8000cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d86:	2006      	movs	r0, #6
 8002d88:	f7fd ffb6 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
}
 8002d8c:	bf00      	nop
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	10110000 	.word	0x10110000
 8002d9c:	40010c00 	.word	0x40010c00

08002da0 <main>:
void distance_sensor_init();
void MX_TIM2_Init(void);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

int main() {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b0ac      	sub	sp, #176	; 0xb0
 8002da4:	af04      	add	r7, sp, #16
    uint32_t stack_idleThread[40];

    OS_init(stack_idleThread, sizeof(stack_idleThread));
 8002da6:	463b      	mov	r3, r7
 8002da8:	21a0      	movs	r1, #160	; 0xa0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fa0a 	bl	80031c4 <OS_init>

    MX_GPIO_Init();
 8002db0:	f7ff ffb6 	bl	8002d20 <MX_GPIO_Init>
    MX_TIM2_Init();
 8002db4:	f000 f960 	bl	8003078 <MX_TIM2_Init>
    distance_sensor_init();
 8002db8:	f000 f944 	bl	8003044 <distance_sensor_init>

    semaphore_init(&mutex_setpoint, 1, 1);
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4831      	ldr	r0, [pc, #196]	; (8002e88 <main+0xe8>)
 8002dc2:	f000 fbb7 	bl	8003534 <semaphore_init>
    semaphore_init(&mutex_current_distance, 1, 1);
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4830      	ldr	r0, [pc, #192]	; (8002e8c <main+0xec>)
 8002dcc:	f000 fbb2 	bl	8003534 <semaphore_init>
    semaphore_init(&mutex_pwm_value, 1, 1);
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	482e      	ldr	r0, [pc, #184]	; (8002e90 <main+0xf0>)
 8002dd6:	f000 fbad 	bl	8003534 <semaphore_init>
    PID_setup(&pidController, -0.0001, -0.00001, -0.00001, 200, 0.3, -0.3);
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <main+0xf4>)
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <main+0xf8>)
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <main+0xfc>)
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4b2e      	ldr	r3, [pc, #184]	; (8002ea0 <main+0x100>)
 8002de8:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <main+0x100>)
 8002dea:	492e      	ldr	r1, [pc, #184]	; (8002ea4 <main+0x104>)
 8002dec:	482e      	ldr	r0, [pc, #184]	; (8002ea8 <main+0x108>)
 8002dee:	f000 fe93 	bl	8003b18 <PID_setup>

    parameters_distance_sensor_task.deadline_absolute = 5;
 8002df2:	4b2e      	ldr	r3, [pc, #184]	; (8002eac <main+0x10c>)
 8002df4:	2205      	movs	r2, #5
 8002df6:	601a      	str	r2, [r3, #0]
    parameters_distance_sensor_task.deadline_dinamic = 5;
 8002df8:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <main+0x10c>)
 8002dfa:	2205      	movs	r2, #5
 8002dfc:	605a      	str	r2, [r3, #4]
    parameters_distance_sensor_task.period_absolute = 5;
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <main+0x10c>)
 8002e00:	2205      	movs	r2, #5
 8002e02:	609a      	str	r2, [r3, #8]
    parameters_distance_sensor_task.period_dinamic = 5;
 8002e04:	4b29      	ldr	r3, [pc, #164]	; (8002eac <main+0x10c>)
 8002e06:	2205      	movs	r2, #5
 8002e08:	60da      	str	r2, [r3, #12]

    parameters_calc_pid.deadline_absolute = 5;
 8002e0a:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <main+0x110>)
 8002e0c:	2205      	movs	r2, #5
 8002e0e:	601a      	str	r2, [r3, #0]
    parameters_calc_pid.deadline_dinamic = 5;
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <main+0x110>)
 8002e12:	2205      	movs	r2, #5
 8002e14:	605a      	str	r2, [r3, #4]
    parameters_calc_pid.period_absolute = 5;
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <main+0x110>)
 8002e18:	2205      	movs	r2, #5
 8002e1a:	609a      	str	r2, [r3, #8]
    parameters_calc_pid.period_dinamic = 5;
 8002e1c:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <main+0x110>)
 8002e1e:	2205      	movs	r2, #5
 8002e20:	60da      	str	r2, [r3, #12]

    parameters_pwm_actuator_task.deadline_absolute = 5;
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <main+0x114>)
 8002e24:	2205      	movs	r2, #5
 8002e26:	601a      	str	r2, [r3, #0]
    parameters_pwm_actuator_task.deadline_dinamic = 5;
 8002e28:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <main+0x114>)
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	605a      	str	r2, [r3, #4]
    parameters_pwm_actuator_task.period_absolute = 5;
 8002e2e:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <main+0x114>)
 8002e30:	2205      	movs	r2, #5
 8002e32:	609a      	str	r2, [r3, #8]
    parameters_pwm_actuator_task.period_dinamic = 5;
 8002e34:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <main+0x114>)
 8002e36:	2205      	movs	r2, #5
 8002e38:	60da      	str	r2, [r3, #12]

    struct_distance_sensor_task.TCB_thread.task_parameters = &parameters_distance_sensor_task;
 8002e3a:	4b1f      	ldr	r3, [pc, #124]	; (8002eb8 <main+0x118>)
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <main+0x10c>)
 8002e3e:	60da      	str	r2, [r3, #12]
    struct_calc_pid.TCB_thread.task_parameters = &parameters_calc_pid;
 8002e40:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <main+0x11c>)
 8002e42:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <main+0x110>)
 8002e44:	60da      	str	r2, [r3, #12]
    struct_pwm_actuator_task.TCB_thread.task_parameters = &parameters_pwm_actuator_task;
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <main+0x120>)
 8002e48:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <main+0x114>)
 8002e4a:	60da      	str	r2, [r3, #12]

    OSPeriodic_task_start(&struct_distance_sensor_task.TCB_thread, 
 8002e4c:	23a0      	movs	r3, #160	; 0xa0
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <main+0x124>)
 8002e50:	491d      	ldr	r1, [pc, #116]	; (8002ec8 <main+0x128>)
 8002e52:	4819      	ldr	r0, [pc, #100]	; (8002eb8 <main+0x118>)
 8002e54:	f000 fd00 	bl	8003858 <OSPeriodic_task_start>
                            &read_distance_sensor,
                            struct_distance_sensor_task.stack_thread,
                            sizeof(struct_distance_sensor_task.stack_thread));

    OSPeriodic_task_start(&struct_calc_pid.TCB_thread, 
 8002e58:	23a0      	movs	r3, #160	; 0xa0
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <main+0x12c>)
 8002e5c:	491c      	ldr	r1, [pc, #112]	; (8002ed0 <main+0x130>)
 8002e5e:	4817      	ldr	r0, [pc, #92]	; (8002ebc <main+0x11c>)
 8002e60:	f000 fcfa 	bl	8003858 <OSPeriodic_task_start>
                            &calc_PID,
                            struct_calc_pid.stack_thread,
                            sizeof(struct_calc_pid.stack_thread));
    
    OSPeriodic_task_start(&struct_pwm_actuator_task.TCB_thread, 
 8002e64:	23a0      	movs	r3, #160	; 0xa0
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <main+0x134>)
 8002e68:	491b      	ldr	r1, [pc, #108]	; (8002ed8 <main+0x138>)
 8002e6a:	4815      	ldr	r0, [pc, #84]	; (8002ec0 <main+0x120>)
 8002e6c:	f000 fcf4 	bl	8003858 <OSPeriodic_task_start>
                            &pwm_actuator,
                            struct_pwm_actuator_task.stack_thread,
                            sizeof(struct_pwm_actuator_task.stack_thread));

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002e70:	2100      	movs	r1, #0
 8002e72:	481a      	ldr	r0, [pc, #104]	; (8002edc <main+0x13c>)
 8002e74:	f7fe f992 	bl	800119c <HAL_TIM_PWM_Start>

    OS_run();
 8002e78:	f000 fa7e 	bl	8003378 <OS_run>
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	37a0      	adds	r7, #160	; 0xa0
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200003dc 	.word	0x200003dc
 8002e8c:	200003e4 	.word	0x200003e4
 8002e90:	200003ec 	.word	0x200003ec
 8002e94:	be99999a 	.word	0xbe99999a
 8002e98:	3e99999a 	.word	0x3e99999a
 8002e9c:	43480000 	.word	0x43480000
 8002ea0:	b727c5ac 	.word	0xb727c5ac
 8002ea4:	b8d1b717 	.word	0xb8d1b717
 8002ea8:	200003b8 	.word	0x200003b8
 8002eac:	20000388 	.word	0x20000388
 8002eb0:	20000398 	.word	0x20000398
 8002eb4:	200003a8 	.word	0x200003a8
 8002eb8:	20000098 	.word	0x20000098
 8002ebc:	20000154 	.word	0x20000154
 8002ec0:	20000210 	.word	0x20000210
 8002ec4:	200000b4 	.word	0x200000b4
 8002ec8:	08002ee1 	.word	0x08002ee1
 8002ecc:	20000170 	.word	0x20000170
 8002ed0:	08002f29 	.word	0x08002f29
 8002ed4:	2000022c 	.word	0x2000022c
 8002ed8:	08002fb5 	.word	0x08002fb5
 8002edc:	200003f4 	.word	0x200003f4

08002ee0 <read_distance_sensor>:

void read_distance_sensor(){
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
    while(1){
        currentDistance = (int) VL53L0X_readRangeContinuousMillimeters(&distanceSensor);
 8002ee4:	480b      	ldr	r0, [pc, #44]	; (8002f14 <read_distance_sensor+0x34>)
 8002ee6:	f7ff fcdd 	bl	80028a4 <VL53L0X_readRangeContinuousMillimeters>
 8002eea:	4603      	mov	r3, r0
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <read_distance_sensor+0x38>)
 8002ef0:	601a      	str	r2, [r3, #0]

        sem_down(&mutex_current_distance);
 8002ef2:	480a      	ldr	r0, [pc, #40]	; (8002f1c <read_distance_sensor+0x3c>)
 8002ef4:	f000 fb8c 	bl	8003610 <sem_down>
        pidController.input = currentDistance;
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <read_distance_sensor+0x38>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fbfd 	bl	80006fc <__aeabi_i2f>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4a06      	ldr	r2, [pc, #24]	; (8002f20 <read_distance_sensor+0x40>)
 8002f06:	6113      	str	r3, [r2, #16]
        sem_up(&mutex_current_distance);
 8002f08:	4804      	ldr	r0, [pc, #16]	; (8002f1c <read_distance_sensor+0x3c>)
 8002f0a:	f000 fb29 	bl	8003560 <sem_up>

        OS_wait_next_period();
 8002f0e:	f000 f975 	bl	80031fc <OS_wait_next_period>
        currentDistance = (int) VL53L0X_readRangeContinuousMillimeters(&distanceSensor);
 8002f12:	e7e7      	b.n	8002ee4 <read_distance_sensor+0x4>
 8002f14:	2000043c 	.word	0x2000043c
 8002f18:	20000094 	.word	0x20000094
 8002f1c:	200003e4 	.word	0x200003e4
 8002f20:	200003b8 	.word	0x200003b8
 8002f24:	00000000 	.word	0x00000000

08002f28 <calc_PID>:
    }
}

void calc_PID(){
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
    while(1){

        sem_down(&mutex_current_distance);
 8002f2e:	481c      	ldr	r0, [pc, #112]	; (8002fa0 <calc_PID+0x78>)
 8002f30:	f000 fb6e 	bl	8003610 <sem_down>
        sem_down(&mutex_setpoint);
 8002f34:	481b      	ldr	r0, [pc, #108]	; (8002fa4 <calc_PID+0x7c>)
 8002f36:	f000 fb6b 	bl	8003610 <sem_down>

        float error = pidController.setpoint - pidController.input;
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <calc_PID+0x80>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <calc_PID+0x80>)
 8002f40:	6912      	ldr	r2, [r2, #16]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fb23 	bl	8000590 <__aeabi_fsub>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	607b      	str	r3, [r7, #4]

        sem_up(&mutex_setpoint);
 8002f4e:	4815      	ldr	r0, [pc, #84]	; (8002fa4 <calc_PID+0x7c>)
 8002f50:	f000 fb06 	bl	8003560 <sem_up>
        sem_up(&mutex_current_distance);
 8002f54:	4812      	ldr	r0, [pc, #72]	; (8002fa0 <calc_PID+0x78>)
 8002f56:	f000 fb03 	bl	8003560 <sem_up>

        float pid_pwm_value = PID_action(&pidController, error);
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4812      	ldr	r0, [pc, #72]	; (8002fa8 <calc_PID+0x80>)
 8002f5e:	f000 fe0d 	bl	8003b7c <PID_action>
 8002f62:	6038      	str	r0, [r7, #0]

        sem_down(&mutex_pwm_value);
 8002f64:	4811      	ldr	r0, [pc, #68]	; (8002fac <calc_PID+0x84>)
 8002f66:	f000 fb53 	bl	8003610 <sem_down>
        pwmVal = pid_pwm_value + 0.61;
 8002f6a:	6838      	ldr	r0, [r7, #0]
 8002f6c:	f7fd fa64 	bl	8000438 <__aeabi_f2d>
 8002f70:	a309      	add	r3, pc, #36	; (adr r3, 8002f98 <calc_PID+0x70>)
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	f7fd f901 	bl	800017c <__adddf3>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7fd fab1 	bl	80004e8 <__aeabi_d2f>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <calc_PID+0x88>)
 8002f8a:	6013      	str	r3, [r2, #0]
        sem_up(&mutex_pwm_value);
 8002f8c:	4807      	ldr	r0, [pc, #28]	; (8002fac <calc_PID+0x84>)
 8002f8e:	f000 fae7 	bl	8003560 <sem_up>

        OS_wait_next_period();
 8002f92:	f000 f933 	bl	80031fc <OS_wait_next_period>
    while(1){
 8002f96:	e7ca      	b.n	8002f2e <calc_PID+0x6>
 8002f98:	b851eb85 	.word	0xb851eb85
 8002f9c:	3fe3851e 	.word	0x3fe3851e
 8002fa0:	200003e4 	.word	0x200003e4
 8002fa4:	200003dc 	.word	0x200003dc
 8002fa8:	200003b8 	.word	0x200003b8
 8002fac:	200003ec 	.word	0x200003ec
 8002fb0:	2000008c 	.word	0x2000008c

08002fb4 <pwm_actuator>:
    }
}

void pwm_actuator(){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
    while(1){

        sem_down(&mutex_pwm_value);
 8002fb8:	480e      	ldr	r0, [pc, #56]	; (8002ff4 <pwm_actuator+0x40>)
 8002fba:	f000 fb29 	bl	8003610 <sem_down>
        TIM2->CCR1 = (int) (pwmVal*TIM2->ARR);
 8002fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fb95 	bl	80006f4 <__aeabi_ui2f>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <pwm_actuator+0x44>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7fd fbe6 	bl	80007a4 <__aeabi_fmul>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fda8 	bl	8000b30 <__aeabi_f2iz>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fe6:	635a      	str	r2, [r3, #52]	; 0x34
        sem_up(&mutex_pwm_value);
 8002fe8:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <pwm_actuator+0x40>)
 8002fea:	f000 fab9 	bl	8003560 <sem_up>

        OS_wait_next_period();
 8002fee:	f000 f905 	bl	80031fc <OS_wait_next_period>
        sem_down(&mutex_pwm_value);
 8002ff2:	e7e1      	b.n	8002fb8 <pwm_actuator+0x4>
 8002ff4:	200003ec 	.word	0x200003ec
 8002ff8:	2000008c 	.word	0x2000008c

08002ffc <aperiodic_task>:
    }
}

void aperiodic_task(){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0

    sem_down(&mutex_setpoint);
 8003000:	480c      	ldr	r0, [pc, #48]	; (8003034 <aperiodic_task+0x38>)
 8003002:	f000 fb05 	bl	8003610 <sem_down>

    if (pidController.setpoint == 400)
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <aperiodic_task+0x3c>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	490c      	ldr	r1, [pc, #48]	; (800303c <aperiodic_task+0x40>)
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fd5d 	bl	8000acc <__aeabi_fcmpeq>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <aperiodic_task+0x24>
        pidController.setpoint = 200;
 8003018:	4b07      	ldr	r3, [pc, #28]	; (8003038 <aperiodic_task+0x3c>)
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <aperiodic_task+0x44>)
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	e002      	b.n	8003026 <aperiodic_task+0x2a>
    else
        pidController.setpoint = 400;
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <aperiodic_task+0x3c>)
 8003022:	4a06      	ldr	r2, [pc, #24]	; (800303c <aperiodic_task+0x40>)
 8003024:	60da      	str	r2, [r3, #12]
    
    sem_up(&mutex_setpoint);
 8003026:	4803      	ldr	r0, [pc, #12]	; (8003034 <aperiodic_task+0x38>)
 8003028:	f000 fa9a 	bl	8003560 <sem_up>

    OS_finished_aperiodic_task();
 800302c:	f000 f910 	bl	8003250 <OS_finished_aperiodic_task>
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200003dc 	.word	0x200003dc
 8003038:	200003b8 	.word	0x200003b8
 800303c:	43c80000 	.word	0x43c80000
 8003040:	43480000 	.word	0x43480000

08003044 <distance_sensor_init>:

void distance_sensor_init() {
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0

    while(!VL53L0X_init(&myTOFsensor));
 8003048:	bf00      	nop
 800304a:	480a      	ldr	r0, [pc, #40]	; (8003074 <distance_sensor_init+0x30>)
 800304c:	f7fe ff0e 	bl	8001e6c <VL53L0X_init>
 8003050:	4603      	mov	r3, r0
 8003052:	f083 0301 	eor.w	r3, r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f6      	bne.n	800304a <distance_sensor_init+0x6>
    VL53L0X_setMeasurementTimingBudget(&myTOFsensor, 20e3); // 20 ms
 800305c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003060:	4804      	ldr	r0, [pc, #16]	; (8003074 <distance_sensor_init+0x30>)
 8003062:	f7ff faab 	bl	80025bc <VL53L0X_setMeasurementTimingBudget>
    VL53L0X_startContinuous(&myTOFsensor, 0);
 8003066:	2100      	movs	r1, #0
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <distance_sensor_init+0x30>)
 800306a:	f7ff fbcc 	bl	8002806 <VL53L0X_startContinuous>
    
    return;
 800306e:	bf00      	nop
}
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000004 	.word	0x20000004

08003078 <MX_TIM2_Init>:

void MX_TIM2_Init(void){
 8003078:	b580      	push	{r7, lr}
 800307a:	b08e      	sub	sp, #56	; 0x38
 800307c:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800307e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800308c:	f107 0320 	add.w	r3, r7, #32
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
 80030a4:	615a      	str	r2, [r3, #20]
 80030a6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80030a8:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <MX_TIM2_Init+0xe8>)
 80030aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80030b0:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <MX_TIM2_Init+0xe8>)
 80030b2:	2207      	movs	r2, #7
 80030b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b6:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <MX_TIM2_Init+0xe8>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80030bc:	4b28      	ldr	r3, [pc, #160]	; (8003160 <MX_TIM2_Init+0xe8>)
 80030be:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c4:	4b26      	ldr	r3, [pc, #152]	; (8003160 <MX_TIM2_Init+0xe8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ca:	4b25      	ldr	r3, [pc, #148]	; (8003160 <MX_TIM2_Init+0xe8>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030d0:	4823      	ldr	r0, [pc, #140]	; (8003160 <MX_TIM2_Init+0xe8>)
 80030d2:	f7fd ffbb 	bl	800104c <HAL_TIM_Base_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM2_Init+0x68>
  {
	  OS_error();
 80030dc:	f000 f86d 	bl	80031ba <OS_error>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ea:	4619      	mov	r1, r3
 80030ec:	481c      	ldr	r0, [pc, #112]	; (8003160 <MX_TIM2_Init+0xe8>)
 80030ee:	f7fe faa9 	bl	8001644 <HAL_TIM_ConfigClockSource>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM2_Init+0x84>
  {
	  OS_error();
 80030f8:	f000 f85f 	bl	80031ba <OS_error>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80030fc:	4818      	ldr	r0, [pc, #96]	; (8003160 <MX_TIM2_Init+0xe8>)
 80030fe:	f7fd fff4 	bl	80010ea <HAL_TIM_PWM_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM2_Init+0x94>
  {
	  OS_error();
 8003108:	f000 f857 	bl	80031ba <OS_error>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310c:	2300      	movs	r3, #0
 800310e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003114:	f107 0320 	add.w	r3, r7, #32
 8003118:	4619      	mov	r1, r3
 800311a:	4811      	ldr	r0, [pc, #68]	; (8003160 <MX_TIM2_Init+0xe8>)
 800311c:	f7fe fe22 	bl	8001d64 <HAL_TIMEx_MasterConfigSynchronization>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM2_Init+0xb2>
  {
	  OS_error();
 8003126:	f000 f848 	bl	80031ba <OS_error>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800312a:	2360      	movs	r3, #96	; 0x60
 800312c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	2200      	movs	r2, #0
 800313e:	4619      	mov	r1, r3
 8003140:	4807      	ldr	r0, [pc, #28]	; (8003160 <MX_TIM2_Init+0xe8>)
 8003142:	f7fe f9bd 	bl	80014c0 <HAL_TIM_PWM_ConfigChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_TIM2_Init+0xd8>
  {
	  OS_error();
 800314c:	f000 f835 	bl	80031ba <OS_error>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003150:	4803      	ldr	r0, [pc, #12]	; (8003160 <MX_TIM2_Init+0xe8>)
 8003152:	f000 fee7 	bl	8003f24 <HAL_TIM_MspPostInit>
}
 8003156:	bf00      	nop
 8003158:	3738      	adds	r7, #56	; 0x38
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200003f4 	.word	0x200003f4

08003164 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	80fb      	strh	r3, [r7, #6]

	uint32_t currentTick = HAL_GetTick();
 800316e:	f7fd fd17 	bl	8000ba0 <HAL_GetTick>
 8003172:	60f8      	str	r0, [r7, #12]

	if (GPIO_Pin == GPIO_PIN_0 && (currentTick - previousTick) > 10){
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10e      	bne.n	8003198 <HAL_GPIO_EXTI_Callback+0x34>
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b0a      	cmp	r3, #10
 8003184:	d908      	bls.n	8003198 <HAL_GPIO_EXTI_Callback+0x34>
		    OSAperiodic_task_start(&struct_aperiodic_task.TCB_thread,
 8003186:	23a0      	movs	r3, #160	; 0xa0
 8003188:	4a06      	ldr	r2, [pc, #24]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x40>)
 800318a:	4907      	ldr	r1, [pc, #28]	; (80031a8 <HAL_GPIO_EXTI_Callback+0x44>)
 800318c:	4807      	ldr	r0, [pc, #28]	; (80031ac <HAL_GPIO_EXTI_Callback+0x48>)
 800318e:	f000 faa5 	bl	80036dc <OSAperiodic_task_start>
                                    &aperiodic_task,
                                    struct_aperiodic_task.stack_thread,
                                    sizeof(struct_aperiodic_task.stack_thread));
		    previousTick = currentTick;
 8003192:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6013      	str	r3, [r2, #0]
	}
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000090 	.word	0x20000090
 80031a4:	200002e8 	.word	0x200002e8
 80031a8:	08002ffd 	.word	0x08002ffd
 80031ac:	200002cc 	.word	0x200002cc

080031b0 <main_idleThread>:
#define PRIORITY_CRITICAL_REGION_NPP NUM_MAX_PERIODIC_TASKS+1

#define LOG2(x) (32U - __builtin_clz(x))

OSThread idleThread;
void main_idleThread() {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
    while (1) {
        OS_onIdle();
 80031b4:	f000 ff8a 	bl	80040cc <OS_onIdle>
 80031b8:	e7fc      	b.n	80031b4 <main_idleThread+0x4>

080031ba <OS_error>:
    }
}
void OS_error(){
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031be:	b672      	cpsid	i
}
 80031c0:	bf00      	nop
	__disable_irq();
	while(1);
 80031c2:	e7fe      	b.n	80031c2 <OS_error+0x8>

080031c4 <OS_init>:
}
void OS_init(void *stkSto, uint32_t stkSize) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
    /* set the PendSV interrupt priority to the lowest level 0xFF */
    *(uint32_t volatile *)0xE000ED20 |= (0xFFU << 16);
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <OS_init+0x2c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a07      	ldr	r2, [pc, #28]	; (80031f0 <OS_init+0x2c>)
 80031d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d8:	6013      	str	r3, [r2, #0]

    /* start idleThread thread */
    OSPeriodic_task_start(&idleThread,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4905      	ldr	r1, [pc, #20]	; (80031f4 <OS_init+0x30>)
 80031e0:	4805      	ldr	r0, [pc, #20]	; (80031f8 <OS_init+0x34>)
 80031e2:	f000 fb39 	bl	8003858 <OSPeriodic_task_start>
                   &main_idleThread,
                   stkSto, stkSize);
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	e000ed20 	.word	0xe000ed20
 80031f4:	080031b1 	.word	0x080031b1
 80031f8:	200004c4 	.word	0x200004c4

080031fc <OS_wait_next_period>:

// Calculate the next task index (the position in OS_Thread array of next task) 
void OS_wait_next_period(){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003202:	b672      	cpsid	i
}
 8003204:	bf00      	nop
    __disable_irq();
    
    uint8_t bit = (1U << (OS_curr->prio - 1U));
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <OS_wait_next_period+0x48>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	7a1b      	ldrb	r3, [r3, #8]
 800320c:	3b01      	subs	r3, #1
 800320e:	2201      	movs	r2, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	71fb      	strb	r3, [r7, #7]
    OS_readySet   &= ~bit;  /* insert to set */
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	43db      	mvns	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <OS_wait_next_period+0x4c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4013      	ands	r3, r2
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <OS_wait_next_period+0x4c>)
 8003224:	6013      	str	r3, [r2, #0]
    OS_waiting_next_periodSet |= bit; /* remove from set */
 8003226:	79fa      	ldrb	r2, [r7, #7]
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <OS_wait_next_period+0x50>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4313      	orrs	r3, r2
 800322e:	4a07      	ldr	r2, [pc, #28]	; (800324c <OS_wait_next_period+0x50>)
 8003230:	6013      	str	r3, [r2, #0]

    OS_sched();
 8003232:	f000 f857 	bl	80032e4 <OS_sched>
  __ASM volatile ("cpsie i" : : : "memory");
 8003236:	b662      	cpsie	i
}
 8003238:	bf00      	nop
    __enable_irq();
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000454 	.word	0x20000454
 8003248:	200004b4 	.word	0x200004b4
 800324c:	200004bc 	.word	0x200004bc

08003250 <OS_finished_aperiodic_task>:

void OS_finished_aperiodic_task(void){
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003256:	b672      	cpsid	i
}
 8003258:	bf00      	nop
    __disable_irq();

    if (number_aperiodic_tasks == 1){
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <OS_finished_aperiodic_task+0x8c>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d103      	bne.n	800326a <OS_finished_aperiodic_task+0x1a>
    	OS_aperiodic_tasks[0] = (OSThread *) 0;
 8003262:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <OS_finished_aperiodic_task+0x90>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e02a      	b.n	80032c0 <OS_finished_aperiodic_task+0x70>

    } else {
		// Update the queue array of aperiodic tasks
		for (uint8_t i = 1; i <= number_aperiodic_tasks; i++){
 800326a:	2301      	movs	r3, #1
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	e022      	b.n	80032b6 <OS_finished_aperiodic_task+0x66>
			OS_aperiodic_tasks[i-1] = OS_aperiodic_tasks[i];
 8003270:	79fa      	ldrb	r2, [r7, #7]
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	3b01      	subs	r3, #1
 8003276:	491a      	ldr	r1, [pc, #104]	; (80032e0 <OS_finished_aperiodic_task+0x90>)
 8003278:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800327c:	4918      	ldr	r1, [pc, #96]	; (80032e0 <OS_finished_aperiodic_task+0x90>)
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			OS_aperiodic_tasks[i-1]->prio = i-1;
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	3b01      	subs	r3, #1
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <OS_finished_aperiodic_task+0x90>)
 8003288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328c:	79fa      	ldrb	r2, [r7, #7]
 800328e:	3a01      	subs	r2, #1
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	721a      	strb	r2, [r3, #8]
			OS_aperiodic_tasks[i-1]->critical_regions_historic[0] = i-1;
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	3b01      	subs	r3, #1
 8003298:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <OS_finished_aperiodic_task+0x90>)
 800329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329e:	79fa      	ldrb	r2, [r7, #7]
 80032a0:	3a01      	subs	r2, #1
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	741a      	strb	r2, [r3, #16]
			OS_aperiodic_tasks[i] = (OSThread *) 0;
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <OS_finished_aperiodic_task+0x90>)
 80032aa:	2100      	movs	r1, #0
 80032ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (uint8_t i = 1; i <= number_aperiodic_tasks; i++){
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	3301      	adds	r3, #1
 80032b4:	71fb      	strb	r3, [r7, #7]
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <OS_finished_aperiodic_task+0x8c>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	79fa      	ldrb	r2, [r7, #7]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d9d7      	bls.n	8003270 <OS_finished_aperiodic_task+0x20>
		}
    }

    // Decreasing number of aperiodic tasks
    number_aperiodic_tasks--;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <OS_finished_aperiodic_task+0x8c>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <OS_finished_aperiodic_task+0x8c>)
 80032ca:	701a      	strb	r2, [r3, #0]

    OS_sched();
 80032cc:	f000 f80a 	bl	80032e4 <OS_sched>
  __ASM volatile ("cpsie i" : : : "memory");
 80032d0:	b662      	cpsie	i
}
 80032d2:	bf00      	nop
    __enable_irq();
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	200004c1 	.word	0x200004c1
 80032e0:	2000048c 	.word	0x2000048c

080032e4 <OS_sched>:


void OS_sched(void) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
    OSThread *next;
    uint8_t OS_Periodic_task_running_index = LOG2(OS_readySet);
 80032ea:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <OS_sched+0x74>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f1c3 0320 	rsb	r3, r3, #32
 80032f8:	70fb      	strb	r3, [r7, #3]

    // If there is not any periodic task ready to sched
    if (OS_Periodic_task_running_index == 0U) {
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <OS_sched+0x34>

        // If there is an aperiodic task to be executable 
        if (number_aperiodic_tasks){
 8003300:	4b16      	ldr	r3, [pc, #88]	; (800335c <OS_sched+0x78>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <OS_sched+0x2c>
            next = OS_aperiodic_tasks[0];
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <OS_sched+0x7c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	e008      	b.n	8003322 <OS_sched+0x3e>

        } else {
            next = OS_tasks[0]; /* the idle thread */
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <OS_sched+0x80>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	e004      	b.n	8003322 <OS_sched+0x3e>
        }

    } else {
        next = OS_tasks[OS_Periodic_task_running_index];
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <OS_sched+0x80>)
 800331c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003320:	607b      	str	r3, [r7, #4]
    }

    Q_ASSERT(next != (OSThread *)0);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d103      	bne.n	8003330 <OS_sched+0x4c>
 8003328:	2186      	movs	r1, #134	; 0x86
 800332a:	480f      	ldr	r0, [pc, #60]	; (8003368 <OS_sched+0x84>)
 800332c:	f000 fed4 	bl	80040d8 <Q_onAssert>

    /* trigger PendSV, if needed */
    if (next != OS_curr) {
 8003330:	4b0e      	ldr	r3, [pc, #56]	; (800336c <OS_sched+0x88>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d00a      	beq.n	8003350 <OS_sched+0x6c>
        OS_next = next;
 800333a:	4a0d      	ldr	r2, [pc, #52]	; (8003370 <OS_sched+0x8c>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6013      	str	r3, [r2, #0]
        //*(uint32_t volatile *)0xE000ED04 = (1U << 28);
        SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <OS_sched+0x90>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <OS_sched+0x90>)
 8003346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334a:	6053      	str	r3, [r2, #4]
        __asm volatile("dsb");
 800334c:	f3bf 8f4f 	dsb	sy
     * DSB - whenever a memory access needs to have completed before program execution progresses.
     * ISB - whenever instruction fetches need to explicitly take place after a certain point in the program,
     * for example after memory map updates or after writing code to be executed.
     * (In practice, this means "throw away any prefetched instructions at this point".)
     * */
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	200004b4 	.word	0x200004b4
 800335c:	200004c1 	.word	0x200004c1
 8003360:	2000048c 	.word	0x2000048c
 8003364:	2000045c 	.word	0x2000045c
 8003368:	08004298 	.word	0x08004298
 800336c:	20000454 	.word	0x20000454
 8003370:	20000458 	.word	0x20000458
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <OS_run>:

void OS_run(void) {
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
    /* callback to configure and start interrupts */
    OS_onStartup();
 800337c:	f000 fe8e 	bl	800409c <OS_onStartup>
  __ASM volatile ("cpsid i" : : : "memory");
 8003380:	b672      	cpsid	i
}
 8003382:	bf00      	nop

    __disable_irq();
    OS_sched();
 8003384:	f7ff ffae 	bl	80032e4 <OS_sched>
  __ASM volatile ("cpsie i" : : : "memory");
 8003388:	b662      	cpsie	i
}
 800338a:	bf00      	nop
    __enable_irq();

    /* the following code should never execute */
    Q_ERROR();
 800338c:	21a1      	movs	r1, #161	; 0xa1
 800338e:	4802      	ldr	r0, [pc, #8]	; (8003398 <OS_run+0x20>)
 8003390:	f000 fea2 	bl	80040d8 <Q_onAssert>
}
 8003394:	bf00      	nop
 8003396:	bd80      	pop	{r7, pc}
 8003398:	08004298 	.word	0x08004298

0800339c <OS_tick>:

void OS_tick(void) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0

    uint32_t workingSet = OS_delayedSet;
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <OS_tick+0x10c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	617b      	str	r3, [r7, #20]
    while (workingSet != 0U) {
 80033a8:	e035      	b.n	8003416 <OS_tick+0x7a>
        OSThread *t = OS_tasks[LOG2(workingSet)];
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	f1c3 0320 	rsb	r3, r3, #32
 80033b4:	4a3d      	ldr	r2, [pc, #244]	; (80034ac <OS_tick+0x110>)
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	607b      	str	r3, [r7, #4]
        uint32_t bit;
        Q_ASSERT((t != (OSThread *)0) && (t->timeout != 0U));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <OS_tick+0x2e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <OS_tick+0x36>
 80033ca:	21aa      	movs	r1, #170	; 0xaa
 80033cc:	4838      	ldr	r0, [pc, #224]	; (80034b0 <OS_tick+0x114>)
 80033ce:	f000 fe83 	bl	80040d8 <Q_onAssert>

        bit = (1U << (t->prio - 1U));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7a1b      	ldrb	r3, [r3, #8]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	2201      	movs	r2, #1
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	603b      	str	r3, [r7, #0]
        --t->timeout;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	1e5a      	subs	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	605a      	str	r2, [r3, #4]
        if (t->timeout == 0U) {
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <OS_tick+0x70>
            OS_readySet   |= bit;  /* insert to set */
 80033f2:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <OS_tick+0x118>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	4a2e      	ldr	r2, [pc, #184]	; (80034b4 <OS_tick+0x118>)
 80033fc:	6013      	str	r3, [r2, #0]
            OS_delayedSet &= ~bit; /* remove from set */
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	43da      	mvns	r2, r3
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <OS_tick+0x10c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4013      	ands	r3, r2
 8003408:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <OS_tick+0x10c>)
 800340a:	6013      	str	r3, [r2, #0]
        }
        workingSet &= ~bit; /* remove from working set */
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	43db      	mvns	r3, r3
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4013      	ands	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
    while (workingSet != 0U) {
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1c6      	bne.n	80033aa <OS_tick+0xe>
    }

    /* Update the dinamics parameters os periodics tasks */
    for (int i = 1; i <= number_periodic_tasks; i++){
 800341c:	2301      	movs	r3, #1
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	e036      	b.n	8003490 <OS_tick+0xf4>
        OSThread *t = OS_tasks[i];
 8003422:	4a22      	ldr	r2, [pc, #136]	; (80034ac <OS_tick+0x110>)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342a:	60fb      	str	r3, [r7, #12]

        t->task_parameters->deadline_dinamic--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	3a01      	subs	r2, #1
 8003434:	605a      	str	r2, [r3, #4]
        t->task_parameters->period_dinamic--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	3a01      	subs	r2, #1
 800343e:	60da      	str	r2, [r3, #12]

        if (t->task_parameters->period_dinamic == 0){
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11f      	bne.n	800348a <OS_tick+0xee>
            uint32_t bit = (1U << (t->prio - 1U));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	7a1b      	ldrb	r3, [r3, #8]
 800344e:	3b01      	subs	r3, #1
 8003450:	2201      	movs	r2, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	60bb      	str	r3, [r7, #8]

            OS_readySet   |= bit;  /* insert to set */
 8003458:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <OS_tick+0x118>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4313      	orrs	r3, r2
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <OS_tick+0x118>)
 8003462:	6013      	str	r3, [r2, #0]
            OS_waiting_next_periodSet &= ~bit; /* remove from set */
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	43da      	mvns	r2, r3
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <OS_tick+0x11c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4013      	ands	r3, r2
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <OS_tick+0x11c>)
 8003470:	6013      	str	r3, [r2, #0]

            t->task_parameters->deadline_dinamic = t->task_parameters->deadline_absolute;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	605a      	str	r2, [r3, #4]
            t->task_parameters->period_dinamic = t->task_parameters->period_absolute;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	60da      	str	r2, [r3, #12]
    for (int i = 1; i <= number_periodic_tasks; i++){
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	3301      	adds	r3, #1
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <OS_tick+0x120>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4293      	cmp	r3, r2
 800349a:	ddc2      	ble.n	8003422 <OS_tick+0x86>
        }
    }
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200004b8 	.word	0x200004b8
 80034ac:	2000045c 	.word	0x2000045c
 80034b0:	08004298 	.word	0x08004298
 80034b4:	200004b4 	.word	0x200004b4
 80034b8:	200004bc 	.word	0x200004bc
 80034bc:	200004c0 	.word	0x200004c0

080034c0 <OS_delay>:

void OS_delay(uint32_t ticks) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
    uint32_t bit;
    __asm volatile ("cpsid i");
 80034c8:	b672      	cpsid	i

    /* never call OS_delay from the idleThread */
    Q_REQUIRE(OS_curr != OS_tasks[0]);
 80034ca:	4b15      	ldr	r3, [pc, #84]	; (8003520 <OS_delay+0x60>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <OS_delay+0x64>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d103      	bne.n	80034de <OS_delay+0x1e>
 80034d6:	21cd      	movs	r1, #205	; 0xcd
 80034d8:	4813      	ldr	r0, [pc, #76]	; (8003528 <OS_delay+0x68>)
 80034da:	f000 fdfd 	bl	80040d8 <Q_onAssert>

    OS_curr->timeout = ticks;
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <OS_delay+0x64>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	605a      	str	r2, [r3, #4]
    bit = (1U << (OS_curr->prio - 1U));
 80034e6:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <OS_delay+0x64>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	7a1b      	ldrb	r3, [r3, #8]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	2201      	movs	r2, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	60fb      	str	r3, [r7, #12]
    OS_readySet &= ~bit;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	43da      	mvns	r2, r3
 80034fa:	4b0c      	ldr	r3, [pc, #48]	; (800352c <OS_delay+0x6c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4013      	ands	r3, r2
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <OS_delay+0x6c>)
 8003502:	6013      	str	r3, [r2, #0]
    OS_delayedSet |= bit;
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <OS_delay+0x70>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	4a08      	ldr	r2, [pc, #32]	; (8003530 <OS_delay+0x70>)
 800350e:	6013      	str	r3, [r2, #0]
    OS_sched();
 8003510:	f7ff fee8 	bl	80032e4 <OS_sched>
    __asm volatile ("cpsie i");
 8003514:	b662      	cpsie	i
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	2000045c 	.word	0x2000045c
 8003524:	20000454 	.word	0x20000454
 8003528:	08004298 	.word	0x08004298
 800352c:	200004b4 	.word	0x200004b4
 8003530:	200004b8 	.word	0x200004b8

08003534 <semaphore_init>:

/* initialization of the semaphore variable */
void semaphore_init(semaphore_t *p_semaphore, uint32_t start_value, uint32_t max_value){
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
	if (!p_semaphore){
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <semaphore_init+0x16>
  __ASM volatile ("cpsid i" : : : "memory");
 8003546:	b672      	cpsid	i
}
 8003548:	bf00      	nop
		__disable_irq();
	}
	p_semaphore->sem_value = start_value;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	601a      	str	r2, [r3, #0]
	p_semaphore->max_value = max_value;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	605a      	str	r2, [r3, #4]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <sem_up>:

/*  */
void sem_up(semaphore_t *p_semaphore){
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003568:	b672      	cpsid	i
}
 800356a:	bf00      	nop
	__disable_irq();

    if (p_semaphore->sem_value < p_semaphore->max_value)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d204      	bcs.n	8003582 <sem_up+0x22>
	    p_semaphore->sem_value++;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]


    // Update the queue of critical_regions_historic array and update the OS_readySet bitmask for schedulling
    for (uint8_t i = 0; i < NUM_MAX_NESTED_CRITICAL_REGIONS+1; i++){
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	e030      	b.n	80035ea <sem_up+0x8a>
       
        // Update the queue of critical_regions_historic array 
        OS_curr->critical_regions_historic[i] = OS_curr->critical_regions_historic[i+1];
 8003588:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <sem_up+0xa4>)
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	1c59      	adds	r1, r3, #1
 8003590:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <sem_up+0xa4>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	4401      	add	r1, r0
 8003598:	7c09      	ldrb	r1, [r1, #16]
 800359a:	4413      	add	r3, r2
 800359c:	460a      	mov	r2, r1
 800359e:	741a      	strb	r2, [r3, #16]
        OS_curr->critical_regions_historic[i+1] = 0;
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <sem_up+0xa4>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	3301      	adds	r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	2200      	movs	r2, #0
 80035ac:	741a      	strb	r2, [r3, #16]

        // If 'i' is the end position of array
        if (OS_curr->critical_regions_historic[i] == OS_curr->prio){
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <sem_up+0xa4>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	4413      	add	r3, r2
 80035b6:	7c1a      	ldrb	r2, [r3, #16]
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <sem_up+0xa4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	7a1b      	ldrb	r3, [r3, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d110      	bne.n	80035e4 <sem_up+0x84>

            // If there was just one critical region,
            if (i == 0){
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d114      	bne.n	80035f2 <sem_up+0x92>

                // Update the OS_readySet bitmask
                uint32_t bit = (1U << (PRIORITY_CRITICAL_REGION_NPP - 1U));
 80035c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035cc:	60bb      	str	r3, [r7, #8]
                OS_readySet &= ~bit;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	43da      	mvns	r2, r3
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <sem_up+0xa8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4013      	ands	r3, r2
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <sem_up+0xa8>)
 80035da:	6013      	str	r3, [r2, #0]

                // Set a null pointer in the unused position 
                OS_tasks[PRIORITY_CRITICAL_REGION_NPP] = (OSThread *) 0;
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <sem_up+0xac>)
 80035de:	2200      	movs	r2, #0
 80035e0:	62da      	str	r2, [r3, #44]	; 0x2c
            }
            break;
 80035e2:	e006      	b.n	80035f2 <sem_up+0x92>
    for (uint8_t i = 0; i < NUM_MAX_NESTED_CRITICAL_REGIONS+1; i++){
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	3301      	adds	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b0a      	cmp	r3, #10
 80035ee:	d9cb      	bls.n	8003588 <sem_up+0x28>
 80035f0:	e000      	b.n	80035f4 <sem_up+0x94>
            break;
 80035f2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80035f4:	b662      	cpsie	i
}
 80035f6:	bf00      	nop
        }
    }

	__enable_irq();
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000454 	.word	0x20000454
 8003608:	200004b4 	.word	0x200004b4
 800360c:	2000045c 	.word	0x2000045c

08003610 <sem_down>:

void sem_down(semaphore_t *p_semaphore){
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003618:	b672      	cpsid	i
}
 800361a:	bf00      	nop
	__disable_irq();

	while (p_semaphore->sem_value == 0){
 800361c:	e004      	b.n	8003628 <sem_down+0x18>
		OS_delay(1U);
 800361e:	2001      	movs	r0, #1
 8003620:	f7ff ff4e 	bl	80034c0 <OS_delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8003624:	b672      	cpsid	i
}
 8003626:	bf00      	nop
	while (p_semaphore->sem_value == 0){
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f6      	beq.n	800361e <sem_down+0xe>
		__disable_irq();
	}

    // Update the queue of critical_regions_historic array and update the OS_readySet bitmask for schedulling
    for (uint8_t i = 0; i < NUM_MAX_NESTED_CRITICAL_REGIONS+1; i++){
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e03c      	b.n	80036b0 <sem_down+0xa0>
        
        // If 'i' is the end position of array
        if (OS_curr->critical_regions_historic[i] == OS_curr->prio) {
 8003636:	4b25      	ldr	r3, [pc, #148]	; (80036cc <sem_down+0xbc>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	4413      	add	r3, r2
 800363e:	7c1a      	ldrb	r2, [r3, #16]
 8003640:	4b22      	ldr	r3, [pc, #136]	; (80036cc <sem_down+0xbc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	7a1b      	ldrb	r3, [r3, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	d12f      	bne.n	80036aa <sem_down+0x9a>

            // Check if the critical_regions_historic queue is not full
            Q_REQUIRE(i+1 < NUM_MAX_NESTED_CRITICAL_REGIONS+1);
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b09      	cmp	r3, #9
 800364e:	d904      	bls.n	800365a <sem_down+0x4a>
 8003650:	f44f 7189 	mov.w	r1, #274	; 0x112
 8003654:	481e      	ldr	r0, [pc, #120]	; (80036d0 <sem_down+0xc0>)
 8003656:	f000 fd3f 	bl	80040d8 <Q_onAssert>

            // Update the positions of index
            for (uint8_t j = i+1; j > 0; j--){
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	3301      	adds	r3, #1
 800365e:	73bb      	strb	r3, [r7, #14]
 8003660:	e00e      	b.n	8003680 <sem_down+0x70>
                OS_curr->critical_regions_historic[j] = OS_curr->critical_regions_historic[j-1];
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <sem_down+0xbc>)
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	7bbb      	ldrb	r3, [r7, #14]
 8003668:	1e59      	subs	r1, r3, #1
 800366a:	4b18      	ldr	r3, [pc, #96]	; (80036cc <sem_down+0xbc>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	7bbb      	ldrb	r3, [r7, #14]
 8003670:	4401      	add	r1, r0
 8003672:	7c09      	ldrb	r1, [r1, #16]
 8003674:	4413      	add	r3, r2
 8003676:	460a      	mov	r2, r1
 8003678:	741a      	strb	r2, [r3, #16]
            for (uint8_t j = i+1; j > 0; j--){
 800367a:	7bbb      	ldrb	r3, [r7, #14]
 800367c:	3b01      	subs	r3, #1
 800367e:	73bb      	strb	r3, [r7, #14]
 8003680:	7bbb      	ldrb	r3, [r7, #14]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1ed      	bne.n	8003662 <sem_down+0x52>
            }

            // Set the new prioriry of task and put the pointer in OS_tasks array
            OS_curr->critical_regions_historic[0] = PRIORITY_CRITICAL_REGION_NPP;
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <sem_down+0xbc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	220b      	movs	r2, #11
 800368c:	741a      	strb	r2, [r3, #16]
            OS_tasks[PRIORITY_CRITICAL_REGION_NPP] = OS_curr;
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <sem_down+0xbc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <sem_down+0xc4>)
 8003694:	62d3      	str	r3, [r2, #44]	; 0x2c

            // Set the bit of the task in OS_readySet bitmask
            uint32_t bit = (1U << (PRIORITY_CRITICAL_REGION_NPP - 1U));
 8003696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800369a:	60bb      	str	r3, [r7, #8]
            OS_readySet |= bit;
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <sem_down+0xc8>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <sem_down+0xc8>)
 80036a6:	6013      	str	r3, [r2, #0]

            break;
 80036a8:	e005      	b.n	80036b6 <sem_down+0xa6>
    for (uint8_t i = 0; i < NUM_MAX_NESTED_CRITICAL_REGIONS+1; i++){
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	3301      	adds	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b0a      	cmp	r3, #10
 80036b4:	d9bf      	bls.n	8003636 <sem_down+0x26>
        }
    }

	p_semaphore->sem_value--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036c0:	b662      	cpsie	i
}
 80036c2:	bf00      	nop

	__enable_irq();
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20000454 	.word	0x20000454
 80036d0:	08004298 	.word	0x08004298
 80036d4:	2000045c 	.word	0x2000045c
 80036d8:	200004b4 	.word	0x200004b4

080036dc <OSAperiodic_task_start>:

// Start a aperiodic task
void OSAperiodic_task_start(OSThread *me,
    OSThreadHandler threadHandler,
    void *stkSto, uint32_t stkSize){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036ea:	b672      	cpsid	i
}
 80036ec:	bf00      	nop

	__disable_irq();

    uint32_t *sp = (uint32_t *)((((uint32_t)stkSto + stkSize) / 8) * 8);
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4413      	add	r3, r2
 80036f4:	f023 0307 	bic.w	r3, r3, #7
 80036f8:	617b      	str	r3, [r7, #20]
    uint32_t *stk_limit;

    /* number of aperiodic tasks must be lower or equal to array with its parameters */
    Q_REQUIRE((number_aperiodic_tasks+1 < NUM_MAX_APERIODIC_TASKS));
 80036fa:	4b53      	ldr	r3, [pc, #332]	; (8003848 <OSAperiodic_task_start+0x16c>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d904      	bls.n	800370c <OSAperiodic_task_start+0x30>
 8003702:	f240 1135 	movw	r1, #309	; 0x135
 8003706:	4851      	ldr	r0, [pc, #324]	; (800384c <OSAperiodic_task_start+0x170>)
 8003708:	f000 fce6 	bl	80040d8 <Q_onAssert>

    *(--sp) = (1U << 24);  /* xPSR */
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3b04      	subs	r3, #4
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003718:	601a      	str	r2, [r3, #0]
    *(--sp) = (uint32_t)threadHandler; /* PC */
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	3b04      	subs	r3, #4
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x0000000EU; /* LR  */
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3b04      	subs	r3, #4
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	220e      	movs	r2, #14
 8003730:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x0000000CU; /* R12 */
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	3b04      	subs	r3, #4
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	220c      	movs	r2, #12
 800373c:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000003U; /* R3  */
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3b04      	subs	r3, #4
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2203      	movs	r2, #3
 8003748:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000002U; /* R2  */
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3b04      	subs	r3, #4
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2202      	movs	r2, #2
 8003754:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000001U; /* R1  */
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3b04      	subs	r3, #4
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000000U; /* R0  */
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3b04      	subs	r3, #4
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
    /* additionally, fake registers R4-R11 */
    *(--sp) = 0x0000000BU; /* R11 */
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3b04      	subs	r3, #4
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	220b      	movs	r2, #11
 8003778:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x0000000AU; /* R10 */
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	3b04      	subs	r3, #4
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	220a      	movs	r2, #10
 8003784:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000009U; /* R9 */
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	3b04      	subs	r3, #4
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2209      	movs	r2, #9
 8003790:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000008U; /* R8 */
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	3b04      	subs	r3, #4
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2208      	movs	r2, #8
 800379c:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000007U; /* R7 */
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3b04      	subs	r3, #4
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2207      	movs	r2, #7
 80037a8:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000006U; /* R6 */
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3b04      	subs	r3, #4
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2206      	movs	r2, #6
 80037b4:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000005U; /* R5 */
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3b04      	subs	r3, #4
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2205      	movs	r2, #5
 80037c0:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000004U; /* R4 */
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	3b04      	subs	r3, #4
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2204      	movs	r2, #4
 80037cc:	601a      	str	r2, [r3, #0]

    /* save the top of the stack in the thread's attibute */
    me->sp = sp;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	601a      	str	r2, [r3, #0]

    /* round up the bottom of the stack to the 8-byte boundary */
    stk_limit = (uint32_t *)(((((uint32_t)stkSto - 1U) / 8) + 1U) * 8);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	08db      	lsrs	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	613b      	str	r3, [r7, #16]

    /* pre-fill the unused part of the stack with 0xDEADBEEF */
    for (sp = sp - 1U; sp >= stk_limit; --sp) {
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3b04      	subs	r3, #4
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e005      	b.n	80037f4 <OSAperiodic_task_start+0x118>
        *sp = 0xDEADBEEFU;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	4a19      	ldr	r2, [pc, #100]	; (8003850 <OSAperiodic_task_start+0x174>)
 80037ec:	601a      	str	r2, [r3, #0]
    for (sp = sp - 1U; sp >= stk_limit; --sp) {
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	3b04      	subs	r3, #4
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d2f5      	bcs.n	80037e8 <OSAperiodic_task_start+0x10c>
    }

    OS_aperiodic_tasks[number_aperiodic_tasks] = me;
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <OSAperiodic_task_start+0x16c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	4a14      	ldr	r2, [pc, #80]	; (8003854 <OSAperiodic_task_start+0x178>)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    OS_aperiodic_tasks[number_aperiodic_tasks]->prio = number_aperiodic_tasks;
 800380a:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <OSAperiodic_task_start+0x16c>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <OSAperiodic_task_start+0x178>)
 8003812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <OSAperiodic_task_start+0x16c>)
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	721a      	strb	r2, [r3, #8]
    OS_aperiodic_tasks[number_aperiodic_tasks]->critical_regions_historic[0] = number_aperiodic_tasks;
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <OSAperiodic_task_start+0x16c>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <OSAperiodic_task_start+0x178>)
 8003824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003828:	4a07      	ldr	r2, [pc, #28]	; (8003848 <OSAperiodic_task_start+0x16c>)
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	741a      	strb	r2, [r3, #16]

    number_aperiodic_tasks++;
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <OSAperiodic_task_start+0x16c>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	3301      	adds	r3, #1
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4b04      	ldr	r3, [pc, #16]	; (8003848 <OSAperiodic_task_start+0x16c>)
 8003838:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800383a:	b662      	cpsie	i
}
 800383c:	bf00      	nop

    __enable_irq();
}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	200004c1 	.word	0x200004c1
 800384c:	08004298 	.word	0x08004298
 8003850:	deadbeef 	.word	0xdeadbeef
 8003854:	2000048c 	.word	0x2000048c

08003858 <OSPeriodic_task_start>:

void OSPeriodic_task_start(
    OSThread *me,
    OSThreadHandler threadHandler,
    void *stkSto, uint32_t stkSize) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]

    /* round down the stack top to the 8-byte boundary
    * NOTE: ARM Cortex-M stack grows down from hi -> low memory
    */
    uint32_t *sp = (uint32_t *)((((uint32_t)stkSto + stkSize) / 8) * 8);
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4413      	add	r3, r2
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	61fb      	str	r3, [r7, #28]
    uint32_t *stk_limit;

    /* priority must be in range of periodic tasks in array
    * and the priority level must be unused
    */
    Q_REQUIRE((number_periodic_tasks+1 < Q_DIM(OS_tasks)-1)
 8003872:	4b95      	ldr	r3, [pc, #596]	; (8003ac8 <OSPeriodic_task_start+0x270>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	3301      	adds	r3, #1
 8003878:	2b0a      	cmp	r3, #10
 800387a:	d807      	bhi.n	800388c <OSPeriodic_task_start+0x34>
 800387c:	4b92      	ldr	r3, [pc, #584]	; (8003ac8 <OSPeriodic_task_start+0x270>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	3301      	adds	r3, #1
 8003882:	4a92      	ldr	r2, [pc, #584]	; (8003acc <OSPeriodic_task_start+0x274>)
 8003884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d004      	beq.n	8003896 <OSPeriodic_task_start+0x3e>
 800388c:	f240 116b 	movw	r1, #363	; 0x16b
 8003890:	488f      	ldr	r0, [pc, #572]	; (8003ad0 <OSPeriodic_task_start+0x278>)
 8003892:	f000 fc21 	bl	80040d8 <Q_onAssert>
              && (OS_tasks[number_periodic_tasks+1] == (OSThread *)0));

    if (threadHandler != &main_idleThread)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4a8e      	ldr	r2, [pc, #568]	; (8003ad4 <OSPeriodic_task_start+0x27c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d005      	beq.n	80038aa <OSPeriodic_task_start+0x52>
        number_periodic_tasks++;
 800389e:	4b8a      	ldr	r3, [pc, #552]	; (8003ac8 <OSPeriodic_task_start+0x270>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4b88      	ldr	r3, [pc, #544]	; (8003ac8 <OSPeriodic_task_start+0x270>)
 80038a8:	701a      	strb	r2, [r3, #0]

    *(--sp) = (1U << 24);  /* xPSR */
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3b04      	subs	r3, #4
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038b6:	601a      	str	r2, [r3, #0]
    *(--sp) = (uint32_t)threadHandler; /* PC */
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	3b04      	subs	r3, #4
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x0000000EU; /* LR  */
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	3b04      	subs	r3, #4
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	220e      	movs	r2, #14
 80038ce:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x0000000CU; /* R12 */
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	3b04      	subs	r3, #4
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	220c      	movs	r2, #12
 80038da:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000003U; /* R3  */
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	3b04      	subs	r3, #4
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2203      	movs	r2, #3
 80038e6:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000002U; /* R2  */
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	3b04      	subs	r3, #4
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	2202      	movs	r2, #2
 80038f2:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000001U; /* R1  */
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	3b04      	subs	r3, #4
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000000U; /* R0  */
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3b04      	subs	r3, #4
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
    /* additionally, fake registers R4-R11 */
    *(--sp) = 0x0000000BU; /* R11 */
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	3b04      	subs	r3, #4
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	220b      	movs	r2, #11
 8003916:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x0000000AU; /* R10 */
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	3b04      	subs	r3, #4
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	220a      	movs	r2, #10
 8003922:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000009U; /* R9 */
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	3b04      	subs	r3, #4
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2209      	movs	r2, #9
 800392e:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000008U; /* R8 */
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3b04      	subs	r3, #4
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2208      	movs	r2, #8
 800393a:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000007U; /* R7 */
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	3b04      	subs	r3, #4
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	2207      	movs	r2, #7
 8003946:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000006U; /* R6 */
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	3b04      	subs	r3, #4
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	2206      	movs	r2, #6
 8003952:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000005U; /* R5 */
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	3b04      	subs	r3, #4
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2205      	movs	r2, #5
 800395e:	601a      	str	r2, [r3, #0]
    *(--sp) = 0x00000004U; /* R4 */
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3b04      	subs	r3, #4
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2204      	movs	r2, #4
 800396a:	601a      	str	r2, [r3, #0]

    /* save the top of the stack in the thread's attibute */
    me->sp = sp;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	601a      	str	r2, [r3, #0]

    /* round up the bottom of the stack to the 8-byte boundary */
    stk_limit = (uint32_t *)(((((uint32_t)stkSto - 1U) / 8) + 1U) * 8);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3b01      	subs	r3, #1
 8003976:	08db      	lsrs	r3, r3, #3
 8003978:	3301      	adds	r3, #1
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	617b      	str	r3, [r7, #20]

    /* pre-fill the unused part of the stack with 0xDEADBEEF */
    for (sp = sp - 1U; sp >= stk_limit; --sp) {
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3b04      	subs	r3, #4
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	e005      	b.n	8003992 <OSPeriodic_task_start+0x13a>
        *sp = 0xDEADBEEFU;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4a53      	ldr	r2, [pc, #332]	; (8003ad8 <OSPeriodic_task_start+0x280>)
 800398a:	601a      	str	r2, [r3, #0]
    for (sp = sp - 1U; sp >= stk_limit; --sp) {
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3b04      	subs	r3, #4
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	429a      	cmp	r2, r3
 8003998:	d2f5      	bcs.n	8003986 <OSPeriodic_task_start+0x12e>
    }

    // If is the Idle Thread
    if (number_periodic_tasks == 0){
 800399a:	4b4b      	ldr	r3, [pc, #300]	; (8003ac8 <OSPeriodic_task_start+0x270>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10b      	bne.n	80039ba <OSPeriodic_task_start+0x162>
        OS_tasks[0] = me;
 80039a2:	4a4a      	ldr	r2, [pc, #296]	; (8003acc <OSPeriodic_task_start+0x274>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6013      	str	r3, [r2, #0]
        OS_tasks[0]->prio = 0;
 80039a8:	4b48      	ldr	r3, [pc, #288]	; (8003acc <OSPeriodic_task_start+0x274>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2200      	movs	r2, #0
 80039ae:	721a      	strb	r2, [r3, #8]
        OS_tasks[0]->critical_regions_historic[0] = 0;
 80039b0:	4b46      	ldr	r3, [pc, #280]	; (8003acc <OSPeriodic_task_start+0x274>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2200      	movs	r2, #0
 80039b6:	741a      	strb	r2, [r3, #16]
 80039b8:	e074      	b.n	8003aa4 <OSPeriodic_task_start+0x24c>

    } else {
        for (uint8_t i=1; i <= number_periodic_tasks; i++){
 80039ba:	2301      	movs	r3, #1
 80039bc:	76fb      	strb	r3, [r7, #27]
 80039be:	e06c      	b.n	8003a9a <OSPeriodic_task_start+0x242>
            // Se deadline da task_i é menor, a task_me tem prioridade maior  ->  me vai ser salvo

            // If is the last loop, the task_me has the higher priority
            if (i == number_periodic_tasks){
 80039c0:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <OSPeriodic_task_start+0x270>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	7efa      	ldrb	r2, [r7, #27]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d111      	bne.n	80039ee <OSPeriodic_task_start+0x196>
                OS_tasks[i] = me;
 80039ca:	7efb      	ldrb	r3, [r7, #27]
 80039cc:	493f      	ldr	r1, [pc, #252]	; (8003acc <OSPeriodic_task_start+0x274>)
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                OS_tasks[i]->prio = i;
 80039d4:	7efb      	ldrb	r3, [r7, #27]
 80039d6:	4a3d      	ldr	r2, [pc, #244]	; (8003acc <OSPeriodic_task_start+0x274>)
 80039d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039dc:	7efa      	ldrb	r2, [r7, #27]
 80039de:	721a      	strb	r2, [r3, #8]
                OS_tasks[i]->critical_regions_historic[0] = i;
 80039e0:	7efb      	ldrb	r3, [r7, #27]
 80039e2:	4a3a      	ldr	r2, [pc, #232]	; (8003acc <OSPeriodic_task_start+0x274>)
 80039e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e8:	7efa      	ldrb	r2, [r7, #27]
 80039ea:	741a      	strb	r2, [r3, #16]
 80039ec:	e052      	b.n	8003a94 <OSPeriodic_task_start+0x23c>

            } else if (OS_tasks[i]->task_parameters->deadline_absolute < me->task_parameters->deadline_absolute ||
 80039ee:	7efb      	ldrb	r3, [r7, #27]
 80039f0:	4a36      	ldr	r2, [pc, #216]	; (8003acc <OSPeriodic_task_start+0x274>)
 80039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d315      	bcc.n	8003a30 <OSPeriodic_task_start+0x1d8>
            /* If the task_i has a lower deadline, it has a higher priority or
                its has a lower period with the same deadline than we need to 
                rearrange the tasks with the correct priority
            */
                    (OS_tasks[i]->task_parameters->deadline_absolute == me->task_parameters->deadline_absolute &&
 8003a04:	7efb      	ldrb	r3, [r7, #27]
 8003a06:	4a31      	ldr	r2, [pc, #196]	; (8003acc <OSPeriodic_task_start+0x274>)
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
            } else if (OS_tasks[i]->task_parameters->deadline_absolute < me->task_parameters->deadline_absolute ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d13c      	bne.n	8003a94 <OSPeriodic_task_start+0x23c>
                        OS_tasks[i]->task_parameters->period_absolute < me->task_parameters->period_absolute)){
 8003a1a:	7efb      	ldrb	r3, [r7, #27]
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <OSPeriodic_task_start+0x274>)
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
                    (OS_tasks[i]->task_parameters->deadline_absolute == me->task_parameters->deadline_absolute &&
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d231      	bcs.n	8003a94 <OSPeriodic_task_start+0x23c>

                for (uint8_t j = number_periodic_tasks; j > i; j--){
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <OSPeriodic_task_start+0x270>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	76bb      	strb	r3, [r7, #26]
 8003a36:	e017      	b.n	8003a68 <OSPeriodic_task_start+0x210>
                    OS_tasks[j] = OS_tasks[j-1];
 8003a38:	7ebb      	ldrb	r3, [r7, #26]
 8003a3a:	1e5a      	subs	r2, r3, #1
 8003a3c:	7ebb      	ldrb	r3, [r7, #26]
 8003a3e:	4923      	ldr	r1, [pc, #140]	; (8003acc <OSPeriodic_task_start+0x274>)
 8003a40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003a44:	4921      	ldr	r1, [pc, #132]	; (8003acc <OSPeriodic_task_start+0x274>)
 8003a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    OS_tasks[j]->prio = j;
 8003a4a:	7ebb      	ldrb	r3, [r7, #26]
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <OSPeriodic_task_start+0x274>)
 8003a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a52:	7eba      	ldrb	r2, [r7, #26]
 8003a54:	721a      	strb	r2, [r3, #8]
                    OS_tasks[j]->critical_regions_historic[0] = j;
 8003a56:	7ebb      	ldrb	r3, [r7, #26]
 8003a58:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <OSPeriodic_task_start+0x274>)
 8003a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5e:	7eba      	ldrb	r2, [r7, #26]
 8003a60:	741a      	strb	r2, [r3, #16]
                for (uint8_t j = number_periodic_tasks; j > i; j--){
 8003a62:	7ebb      	ldrb	r3, [r7, #26]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	76bb      	strb	r3, [r7, #26]
 8003a68:	7eba      	ldrb	r2, [r7, #26]
 8003a6a:	7efb      	ldrb	r3, [r7, #27]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d8e3      	bhi.n	8003a38 <OSPeriodic_task_start+0x1e0>
                }
                OS_tasks[i] = me;
 8003a70:	7efb      	ldrb	r3, [r7, #27]
 8003a72:	4916      	ldr	r1, [pc, #88]	; (8003acc <OSPeriodic_task_start+0x274>)
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                OS_tasks[i]->prio = i;
 8003a7a:	7efb      	ldrb	r3, [r7, #27]
 8003a7c:	4a13      	ldr	r2, [pc, #76]	; (8003acc <OSPeriodic_task_start+0x274>)
 8003a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a82:	7efa      	ldrb	r2, [r7, #27]
 8003a84:	721a      	strb	r2, [r3, #8]
                OS_tasks[i]->critical_regions_historic[0] = i;
 8003a86:	7efb      	ldrb	r3, [r7, #27]
 8003a88:	4a10      	ldr	r2, [pc, #64]	; (8003acc <OSPeriodic_task_start+0x274>)
 8003a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8e:	7efa      	ldrb	r2, [r7, #27]
 8003a90:	741a      	strb	r2, [r3, #16]
                break;
 8003a92:	e007      	b.n	8003aa4 <OSPeriodic_task_start+0x24c>
        for (uint8_t i=1; i <= number_periodic_tasks; i++){
 8003a94:	7efb      	ldrb	r3, [r7, #27]
 8003a96:	3301      	adds	r3, #1
 8003a98:	76fb      	strb	r3, [r7, #27]
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <OSPeriodic_task_start+0x270>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	7efa      	ldrb	r2, [r7, #27]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d98d      	bls.n	80039c0 <OSPeriodic_task_start+0x168>
        }
    }

    /* register the thread with the OS */
    /* make the thread ready to run */
    if (me->prio > 0U) {
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	7a1b      	ldrb	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <OSPeriodic_task_start+0x268>
        OS_readySet |= (1U << (me->prio - 1U));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	7a1b      	ldrb	r3, [r3, #8]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <OSPeriodic_task_start+0x284>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	4a07      	ldr	r2, [pc, #28]	; (8003adc <OSPeriodic_task_start+0x284>)
 8003abe:	6013      	str	r3, [r2, #0]
    }
}
 8003ac0:	bf00      	nop
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	200004c0 	.word	0x200004c0
 8003acc:	2000045c 	.word	0x2000045c
 8003ad0:	08004298 	.word	0x08004298
 8003ad4:	080031b1 	.word	0x080031b1
 8003ad8:	deadbeef 	.word	0xdeadbeef
 8003adc:	200004b4 	.word	0x200004b4

08003ae0 <PendSV_Handler>:

__attribute__ ((naked, optimize("-fno-stack-protector")))
void PendSV_Handler(void) {
__asm volatile (
 8003ae0:	b672      	cpsid	i
 8003ae2:	490b      	ldr	r1, [pc, #44]	; (8003b10 <PendSV_restore+0x1c>)
 8003ae4:	6809      	ldr	r1, [r1, #0]
 8003ae6:	b129      	cbz	r1, 8003af4 <PendSV_restore>
 8003ae8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003aec:	4908      	ldr	r1, [pc, #32]	; (8003b10 <PendSV_restore+0x1c>)
 8003aee:	6809      	ldr	r1, [r1, #0]
 8003af0:	f8c1 d000 	str.w	sp, [r1]

08003af4 <PendSV_restore>:
 8003af4:	4907      	ldr	r1, [pc, #28]	; (8003b14 <PendSV_restore+0x20>)
 8003af6:	6809      	ldr	r1, [r1, #0]
 8003af8:	f8d1 d000 	ldr.w	sp, [r1]
 8003afc:	4905      	ldr	r1, [pc, #20]	; (8003b14 <PendSV_restore+0x20>)
 8003afe:	6809      	ldr	r1, [r1, #0]
 8003b00:	4a03      	ldr	r2, [pc, #12]	; (8003b10 <PendSV_restore+0x1c>)
 8003b02:	6011      	str	r1, [r2, #0]
 8003b04:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b08:	b662      	cpsie	i
 8003b0a:	4770      	bx	lr
    "  CPSIE         I                 \n"

    /* return to the next thread */
    "  BX            lr                \n"
    );
}
 8003b0c:	bf00      	nop
 8003b0e:	0000      	.short	0x0000
 8003b10:	20000454 	.word	0x20000454
 8003b14:	20000458 	.word	0x20000458

08003b18 <PID_setup>:

Q_DEFINE_THIS_FILE

float PERIOD_TOF_SENSOR = 0.05;     // em segundos

void PID_setup(PIDController* controller, float kp, float ki, float kd, float setpoint, float max, float min) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
    Q_ASSERT(controller);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <PID_setup+0x1c>
 8003b2c:	210a      	movs	r1, #10
 8003b2e:	4812      	ldr	r0, [pc, #72]	; (8003b78 <PID_setup+0x60>)
 8003b30:	f000 fad2 	bl	80040d8 <Q_onAssert>

    controller->Kp = kp;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	601a      	str	r2, [r3, #0]
    controller->Ki = ki;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	605a      	str	r2, [r3, #4]
    controller->Kd = kd;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	609a      	str	r2, [r3, #8]
    controller->setpoint = setpoint;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	60da      	str	r2, [r3, #12]
    controller->input = 0.0;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
    controller->integral_sum = 0.0;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	615a      	str	r2, [r3, #20]
    controller->error_prev = 0.0;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	619a      	str	r2, [r3, #24]
    controller->max = max;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	61da      	str	r2, [r3, #28]
    controller->min = min;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a3a      	ldr	r2, [r7, #32]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	080042a8 	.word	0x080042a8

08003b7c <PID_action>:

float PID_action(PIDController* controller, float error) {
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b089      	sub	sp, #36	; 0x24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
    Q_ASSERT(controller);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d103      	bne.n	8003b94 <PID_action+0x18>
 8003b8c:	2118      	movs	r1, #24
 8003b8e:	4834      	ldr	r0, [pc, #208]	; (8003c60 <PID_action+0xe4>)
 8003b90:	f000 faa2 	bl	80040d8 <Q_onAssert>

    controller->integral_sum = controller->integral_sum + (error * PERIOD_TOF_SENSOR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695c      	ldr	r4, [r3, #20]
 8003b98:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <PID_action+0xe8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6839      	ldr	r1, [r7, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fe00 	bl	80007a4 <__aeabi_fmul>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7fc fcf3 	bl	8000594 <__addsf3>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	615a      	str	r2, [r3, #20]
    float derivative_term = (error - controller->error_prev) / PERIOD_TOF_SENSOR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6838      	ldr	r0, [r7, #0]
 8003bbe:	f7fc fce7 	bl	8000590 <__aeabi_fsub>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <PID_action+0xe8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f7fc fe9d 	bl	800090c <__aeabi_fdiv>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	61bb      	str	r3, [r7, #24]

    controller->error_prev = error;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	619a      	str	r2, [r3, #24]

    float comp_p = (controller->Kp * error);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	6838      	ldr	r0, [r7, #0]
 8003be4:	f7fc fdde 	bl	80007a4 <__aeabi_fmul>
 8003be8:	4603      	mov	r3, r0
 8003bea:	617b      	str	r3, [r7, #20]
    float comp_i = (controller->Ki * controller->integral_sum);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f7fc fdd4 	bl	80007a4 <__aeabi_fmul>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	613b      	str	r3, [r7, #16]
    float comp_d = (controller->Kd * derivative_term);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4619      	mov	r1, r3
 8003c06:	69b8      	ldr	r0, [r7, #24]
 8003c08:	f7fc fdcc 	bl	80007a4 <__aeabi_fmul>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60fb      	str	r3, [r7, #12]
    
    float output = comp_p + comp_i + comp_d;
 8003c10:	6939      	ldr	r1, [r7, #16]
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f7fc fcbe 	bl	8000594 <__addsf3>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7fc fcb9 	bl	8000594 <__addsf3>
 8003c22:	4603      	mov	r3, r0
 8003c24:	61fb      	str	r3, [r7, #28]

    if (output > controller->max) {
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	69f8      	ldr	r0, [r7, #28]
 8003c2e:	f7fc ff75 	bl	8000b1c <__aeabi_fcmpgt>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <PID_action+0xc2>
      output = controller->max;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	61fb      	str	r3, [r7, #28]
    }
    if (output < controller->min) {
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4619      	mov	r1, r3
 8003c44:	69f8      	ldr	r0, [r7, #28]
 8003c46:	f7fc ff4b 	bl	8000ae0 <__aeabi_fcmplt>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <PID_action+0xda>
      output = controller->min;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	61fb      	str	r3, [r7, #28]
    }

    return output;
 8003c56:	69fb      	ldr	r3, [r7, #28]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3724      	adds	r7, #36	; 0x24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd90      	pop	{r4, r7, pc}
 8003c60:	080042a8 	.word	0x080042a8
 8003c64:	2000001c 	.word	0x2000001c

08003c68 <gpio_configure>:
		case (uint32_t) GPIOB: RCC->apb2enr |= RCC_APB2ENR_IOPBEN; break;
		case (uint32_t) GPIOC: RCC->apb2enr |= RCC_APB2ENR_IOPCEN; break;
	}
}

void gpio_configure(struct gpio* gpio, uint8_t pin, uint8_t mode, uint8_t cnf) {
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	4608      	mov	r0, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	70fb      	strb	r3, [r7, #3]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	70bb      	strb	r3, [r7, #2]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	707b      	strb	r3, [r7, #1]
	uint8_t reg = pin / 8;
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	08db      	lsrs	r3, r3, #3
 8003c86:	73fb      	strb	r3, [r7, #15]
	uint8_t base = (pin % 8) * 4;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	73bb      	strb	r3, [r7, #14]
	gpio->cr[reg] = (gpio->cr[reg] & ~(0b1111 << base)) | (mode << base) | (cnf << base << 2);
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9c:	7bba      	ldrb	r2, [r7, #14]
 8003c9e:	210f      	movs	r1, #15
 8003ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca4:	43d2      	mvns	r2, r2
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	78b9      	ldrb	r1, [r7, #2]
 8003caa:	7bba      	ldrb	r2, [r7, #14]
 8003cac:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	7879      	ldrb	r1, [r7, #1]
 8003cb4:	7bba      	ldrb	r2, [r7, #14]
 8003cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	7bfa      	ldrb	r2, [r7, #15]
 8003cc0:	4319      	orrs	r1, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr
	...

08003cd4 <i2c_init>:
bool gpio_read(struct gpio* gpio, uint8_t pin) {
	return (gpio->idr >> pin) != 0;
}

// I2C
void i2c_init(struct i2c* i2c) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	switch ((uint32_t) i2c) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <i2c_init+0x68>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d118      	bne.n	8003d16 <i2c_init+0x42>
		case (uint32_t) I2C1:
			RCC->apb1enr |= RCC_APB1ENR_I2C1EN;
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <i2c_init+0x6c>)
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <i2c_init+0x6c>)
 8003cea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cee:	61d3      	str	r3, [r2, #28]
			RCC->apb2enr |= RCC_APB2ENR_IOPBEN;
 8003cf0:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <i2c_init+0x6c>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <i2c_init+0x6c>)
 8003cf6:	f043 0308 	orr.w	r3, r3, #8
 8003cfa:	6193      	str	r3, [r2, #24]
			gpio_configure(GPIOB, 6, GPIO_CR_MODE_OUTPUT_50M, GPIO_CR_CNF_OUTPUT_ALT_OPEN_DRAIN);
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	2203      	movs	r2, #3
 8003d00:	2106      	movs	r1, #6
 8003d02:	4810      	ldr	r0, [pc, #64]	; (8003d44 <i2c_init+0x70>)
 8003d04:	f7ff ffb0 	bl	8003c68 <gpio_configure>
			gpio_configure(GPIOB, 7, GPIO_CR_MODE_OUTPUT_50M, GPIO_CR_CNF_OUTPUT_ALT_OPEN_DRAIN);
 8003d08:	2303      	movs	r3, #3
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	2107      	movs	r1, #7
 8003d0e:	480d      	ldr	r0, [pc, #52]	; (8003d44 <i2c_init+0x70>)
 8003d10:	f7ff ffaa 	bl	8003c68 <gpio_configure>
			break;
 8003d14:	bf00      	nop
	}
	i2c->cr2 = I2C_CR2_FREQ(36);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2224      	movs	r2, #36	; 0x24
 8003d1a:	605a      	str	r2, [r3, #4]
	i2c->ccr = 180;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	22b4      	movs	r2, #180	; 0xb4
 8003d20:	61da      	str	r2, [r3, #28]
	i2c->trise = 37;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2225      	movs	r2, #37	; 0x25
 8003d26:	621a      	str	r2, [r3, #32]
	i2c->cr1 |= I2C_CR1_PE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f043 0201 	orr.w	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40005400 	.word	0x40005400
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40010c00 	.word	0x40010c00

08003d48 <i2c_read>:

void i2c_read(struct i2c* i2c, uint8_t slave_address, uint8_t* data, uint8_t size) {
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	461a      	mov	r2, r3
 8003d54:	460b      	mov	r3, r1
 8003d56:	72fb      	strb	r3, [r7, #11]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	72bb      	strb	r3, [r7, #10]
	i2c->cr1 &= ~I2C_CR1_POS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	601a      	str	r2, [r3, #0]
	i2c->cr1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	601a      	str	r2, [r3, #0]
	while (!(i2c->sr1 & I2C_SR1_SB));
 8003d74:	bf00      	nop
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f9      	beq.n	8003d76 <i2c_read+0x2e>
	i2c->dr = (slave_address << 1) | 1;
 8003d82:	7afb      	ldrb	r3, [r7, #11]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
	while (!(i2c->sr1 & I2C_SR1_ADDR));
 8003d90:	bf00      	nop
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f9      	beq.n	8003d92 <i2c_read+0x4a>
	i2c->sr1;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	695b      	ldr	r3, [r3, #20]
	i2c->sr2;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699b      	ldr	r3, [r3, #24]
	uint8_t index;
	for (index = 0; index < size; index++) {
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]
 8003daa:	e021      	b.n	8003df0 <i2c_read+0xa8>
		if (index + 1 == size) {
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	7abb      	ldrb	r3, [r7, #10]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d10b      	bne.n	8003dce <i2c_read+0x86>
			i2c->cr1 &= ~I2C_CR1_ACK;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]
			i2c->cr1 |= I2C_CR1_STOP;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	601a      	str	r2, [r3, #0]
		}
		while (!(i2c->sr1 & I2C_SR1_RXNE));
 8003dce:	bf00      	nop
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f9      	beq.n	8003dd0 <i2c_read+0x88>
		data[index] = i2c->dr;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6919      	ldr	r1, [r3, #16]
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	b2ca      	uxtb	r2, r1
 8003de8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < size; index++) {
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	3301      	adds	r3, #1
 8003dee:	75fb      	strb	r3, [r7, #23]
 8003df0:	7dfa      	ldrb	r2, [r7, #23]
 8003df2:	7abb      	ldrb	r3, [r7, #10]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d3d9      	bcc.n	8003dac <i2c_read+0x64>
	}
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <i2c_write>:

void i2c_write(struct i2c* i2c, uint8_t slave_address, uint8_t* data, uint8_t size) {
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	460b      	mov	r3, r1
 8003e12:	72fb      	strb	r3, [r7, #11]
 8003e14:	4613      	mov	r3, r2
 8003e16:	72bb      	strb	r3, [r7, #10]
	volatile uint16_t reg;
	i2c->cr1 &= ~I2C_CR1_POS;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]
	i2c->cr1 |= I2C_CR1_START;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	601a      	str	r2, [r3, #0]
	while (!(i2c->sr1 & I2C_SR1_SB));
 8003e30:	bf00      	nop
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f9      	beq.n	8003e32 <i2c_write+0x2e>
	i2c->dr = (slave_address << 1) | 0;
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	611a      	str	r2, [r3, #16]
	while (!(i2c->sr1 & I2C_SR1_ADDR));
 8003e48:	bf00      	nop
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f9      	beq.n	8003e4a <i2c_write+0x46>
	reg = i2c->sr1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	82bb      	strh	r3, [r7, #20]
	reg = i2c->sr2;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	82bb      	strh	r3, [r7, #20]
	while (!(i2c->sr1 & I2C_SR1_TXE));
 8003e66:	bf00      	nop
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f9      	beq.n	8003e68 <i2c_write+0x64>
	for (uint8_t index = 0; index < size; index++) {
 8003e74:	2300      	movs	r3, #0
 8003e76:	75fb      	strb	r3, [r7, #23]
 8003e78:	e01f      	b.n	8003eba <i2c_write+0xb6>
		i2c->dr = data[index];
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4413      	add	r3, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	611a      	str	r2, [r3, #16]
		while (!(i2c->sr1 & I2C_SR1_TXE));
 8003e88:	bf00      	nop
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f9      	beq.n	8003e8a <i2c_write+0x86>
		while (!(i2c->sr1 & I2C_SR1_BTF));
 8003e96:	bf00      	nop
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f9      	beq.n	8003e98 <i2c_write+0x94>
		reg = i2c->sr1;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	82bb      	strh	r3, [r7, #20]
		reg = i2c->sr2;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	82bb      	strh	r3, [r7, #20]
	for (uint8_t index = 0; index < size; index++) {
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
 8003eba:	7dfa      	ldrb	r2, [r7, #23]
 8003ebc:	7abb      	ldrb	r3, [r7, #10]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d3db      	bcc.n	8003e7a <i2c_write+0x76>
	}
	i2c->cr1 |= I2C_CR1_STOP;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]
	reg = i2c->sr1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	82bb      	strh	r3, [r7, #20]
	reg = i2c->sr2;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	82bb      	strh	r3, [r7, #20]
	(void) reg;
 8003ede:	8abb      	ldrh	r3, [r7, #20]
}
 8003ee0:	bf00      	nop
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efc:	d10b      	bne.n	8003f16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <HAL_TIM_Base_MspInit+0x34>)
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	4a07      	ldr	r2, [pc, #28]	; (8003f20 <HAL_TIM_Base_MspInit+0x34>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	61d3      	str	r3, [r2, #28]
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_TIM_Base_MspInit+0x34>)
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	40021000 	.word	0x40021000

08003f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2c:	f107 0310 	add.w	r3, r7, #16
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f42:	d117      	bne.n	8003f74 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <HAL_TIM_MspPostInit+0x58>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <HAL_TIM_MspPostInit+0x58>)
 8003f4a:	f043 0304 	orr.w	r3, r3, #4
 8003f4e:	6193      	str	r3, [r2, #24]
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <HAL_TIM_MspPostInit+0x58>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f60:	2302      	movs	r3, #2
 8003f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f64:	2302      	movs	r3, #2
 8003f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f68:	f107 0310 	add.w	r3, r7, #16
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4804      	ldr	r0, [pc, #16]	; (8003f80 <HAL_TIM_MspPostInit+0x5c>)
 8003f70:	f7fc fed0 	bl	8000d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003f74:	bf00      	nop
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40010800 	.word	0x40010800

08003f84 <__NVIC_SetPriority>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	6039      	str	r1, [r7, #0]
 8003f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	db0a      	blt.n	8003fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	490c      	ldr	r1, [pc, #48]	; (8003fd0 <__NVIC_SetPriority+0x4c>)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	0112      	lsls	r2, r2, #4
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fac:	e00a      	b.n	8003fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4908      	ldr	r1, [pc, #32]	; (8003fd4 <__NVIC_SetPriority+0x50>)
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	0112      	lsls	r2, r2, #4
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	761a      	strb	r2, [r3, #24]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e100 	.word	0xe000e100
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fdc:	f3bf 8f4f 	dsb	sy
}
 8003fe0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <__NVIC_SystemReset+0x24>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003fea:	4904      	ldr	r1, [pc, #16]	; (8003ffc <__NVIC_SystemReset+0x24>)
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <__NVIC_SystemReset+0x28>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ff2:	f3bf 8f4f 	dsb	sy
}
 8003ff6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <__NVIC_SystemReset+0x20>
 8003ffc:	e000ed00 	.word	0xe000ed00
 8004000:	05fa0004 	.word	0x05fa0004

08004004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004014:	d301      	bcc.n	800401a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004016:	2301      	movs	r3, #1
 8004018:	e00f      	b.n	800403a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <SysTick_Config+0x40>)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3b01      	subs	r3, #1
 8004020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004022:	210f      	movs	r1, #15
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	f7ff ffac 	bl	8003f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <SysTick_Config+0x40>)
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004032:	4b04      	ldr	r3, [pc, #16]	; (8004044 <SysTick_Config+0x40>)
 8004034:	2207      	movs	r2, #7
 8004036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	e000e010 	.word	0xe000e010

08004048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800404c:	e7fe      	b.n	800404c <NMI_Handler+0x4>

0800404e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004052:	e7fe      	b.n	8004052 <HardFault_Handler+0x4>

08004054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004058:	e7fe      	b.n	8004058 <MemManage_Handler+0x4>

0800405a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800405e:	e7fe      	b.n	800405e <BusFault_Handler+0x4>

08004060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004064:	e7fe      	b.n	8004064 <UsageFault_Handler+0x4>

08004066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004082:	f7fc fd7b 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_tick();
 8004086:	f7ff f989 	bl	800339c <OS_tick>
  __ASM volatile ("cpsid i" : : : "memory");
 800408a:	b672      	cpsid	i
}
 800408c:	bf00      	nop
  __disable_irq();
  OS_sched();
 800408e:	f7ff f929 	bl	80032e4 <OS_sched>
  __ASM volatile ("cpsie i" : : : "memory");
 8004092:	b662      	cpsie	i
}
 8004094:	bf00      	nop
  __enable_irq();
  /* USER CODE END SysTick_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <OS_onStartup>:

void OS_onStartup(void) {
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
    SystemCoreClockUpdate();
 80040a0:	f000 f82e 	bl	8004100 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / TICKS_PER_SEC);
 80040a4:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <OS_onStartup+0x28>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a07      	ldr	r2, [pc, #28]	; (80040c8 <OS_onStartup+0x2c>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ffa7 	bl	8004004 <SysTick_Config>

    /* set the SysTick interrupt priority (highest) */
    NVIC_SetPriority(SysTick_IRQn, 0U);
 80040b6:	2100      	movs	r1, #0
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295
 80040bc:	f7ff ff62 	bl	8003f84 <__NVIC_SetPriority>
}
 80040c0:	bf00      	nop
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000020 	.word	0x20000020
 80040c8:	51eb851f 	.word	0x51eb851f

080040cc <OS_onIdle>:

void OS_onIdle(void) {
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
#ifdef NDBEBUG
    __WFI(); /* stop the CPU and Wait for Interrupt */
#endif
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <Q_onAssert>:

void Q_onAssert(char const *module, int loc) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
    /* TBD: damage control */
    (void)module; /* avoid the "unused parameter" compiler warning */
    (void)loc;    /* avoid the "unused parameter" compiler warning */
    NVIC_SystemReset();
 80040e2:	f7ff ff79 	bl	8003fd8 <__NVIC_SystemReset>

080040e6 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80040ea:	2001      	movs	r0, #1
 80040ec:	f7fc ff96 	bl	800101c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	2300      	movs	r3, #0
 8004110:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004112:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <SystemCoreClockUpdate+0xd0>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d011      	beq.n	8004146 <SystemCoreClockUpdate+0x46>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b08      	cmp	r3, #8
 8004126:	d83a      	bhi.n	800419e <SystemCoreClockUpdate+0x9e>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <SystemCoreClockUpdate+0x36>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d004      	beq.n	800413e <SystemCoreClockUpdate+0x3e>
 8004134:	e033      	b.n	800419e <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8004136:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <SystemCoreClockUpdate+0xd4>)
 8004138:	4a27      	ldr	r2, [pc, #156]	; (80041d8 <SystemCoreClockUpdate+0xd8>)
 800413a:	601a      	str	r2, [r3, #0]
      break;
 800413c:	e033      	b.n	80041a6 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800413e:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <SystemCoreClockUpdate+0xd4>)
 8004140:	4a25      	ldr	r2, [pc, #148]	; (80041d8 <SystemCoreClockUpdate+0xd8>)
 8004142:	601a      	str	r2, [r3, #0]
      break;
 8004144:	e02f      	b.n	80041a6 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8004146:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <SystemCoreClockUpdate+0xd0>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800414e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004150:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <SystemCoreClockUpdate+0xd0>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004158:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	0c9b      	lsrs	r3, r3, #18
 800415e:	3302      	adds	r3, #2
 8004160:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4a1c      	ldr	r2, [pc, #112]	; (80041dc <SystemCoreClockUpdate+0xdc>)
 800416c:	fb02 f303 	mul.w	r3, r2, r3
 8004170:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <SystemCoreClockUpdate+0xd4>)
 8004172:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8004174:	e017      	b.n	80041a6 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <SystemCoreClockUpdate+0xd0>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d006      	beq.n	8004190 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4a15      	ldr	r2, [pc, #84]	; (80041dc <SystemCoreClockUpdate+0xdc>)
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <SystemCoreClockUpdate+0xd4>)
 800418c:	6013      	str	r3, [r2, #0]
      break;
 800418e:	e00a      	b.n	80041a6 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4a11      	ldr	r2, [pc, #68]	; (80041d8 <SystemCoreClockUpdate+0xd8>)
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <SystemCoreClockUpdate+0xd4>)
 800419a:	6013      	str	r3, [r2, #0]
      break;
 800419c:	e003      	b.n	80041a6 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <SystemCoreClockUpdate+0xd4>)
 80041a0:	4a0d      	ldr	r2, [pc, #52]	; (80041d8 <SystemCoreClockUpdate+0xd8>)
 80041a2:	601a      	str	r2, [r3, #0]
      break;
 80041a4:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <SystemCoreClockUpdate+0xd0>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <SystemCoreClockUpdate+0xe0>)
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <SystemCoreClockUpdate+0xd4>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
 80041c0:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <SystemCoreClockUpdate+0xd4>)
 80041c2:	6013      	str	r3, [r2, #0]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	20000020 	.word	0x20000020
 80041d8:	007a1200 	.word	0x007a1200
 80041dc:	003d0900 	.word	0x003d0900
 80041e0:	080042b8 	.word	0x080042b8

080041e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80041e4:	480d      	ldr	r0, [pc, #52]	; (800421c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80041e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80041e8:	f7ff ff84 	bl	80040f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041ec:	480c      	ldr	r0, [pc, #48]	; (8004220 <LoopForever+0x6>)
  ldr r1, =_edata
 80041ee:	490d      	ldr	r1, [pc, #52]	; (8004224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80041f0:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <LoopForever+0xe>)
  movs r3, #0
 80041f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041f4:	e002      	b.n	80041fc <LoopCopyDataInit>

080041f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041fa:	3304      	adds	r3, #4

080041fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004200:	d3f9      	bcc.n	80041f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004204:	4c0a      	ldr	r4, [pc, #40]	; (8004230 <LoopForever+0x16>)
  movs r3, #0
 8004206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004208:	e001      	b.n	800420e <LoopFillZerobss>

0800420a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800420a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800420c:	3204      	adds	r2, #4

0800420e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800420e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004210:	d3fb      	bcc.n	800420a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004212:	f000 f811 	bl	8004238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004216:	f7fe fdc3 	bl	8002da0 <main>

0800421a <LoopForever>:

LoopForever:
  b LoopForever
 800421a:	e7fe      	b.n	800421a <LoopForever>
  ldr   r0, =_estack
 800421c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004224:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8004228:	080042d0 	.word	0x080042d0
  ldr r2, =_sbss
 800422c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8004230:	200004e0 	.word	0x200004e0

08004234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004234:	e7fe      	b.n	8004234 <ADC1_2_IRQHandler>
	...

08004238 <__libc_init_array>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	2600      	movs	r6, #0
 800423c:	4d0c      	ldr	r5, [pc, #48]	; (8004270 <__libc_init_array+0x38>)
 800423e:	4c0d      	ldr	r4, [pc, #52]	; (8004274 <__libc_init_array+0x3c>)
 8004240:	1b64      	subs	r4, r4, r5
 8004242:	10a4      	asrs	r4, r4, #2
 8004244:	42a6      	cmp	r6, r4
 8004246:	d109      	bne.n	800425c <__libc_init_array+0x24>
 8004248:	f000 f81a 	bl	8004280 <_init>
 800424c:	2600      	movs	r6, #0
 800424e:	4d0a      	ldr	r5, [pc, #40]	; (8004278 <__libc_init_array+0x40>)
 8004250:	4c0a      	ldr	r4, [pc, #40]	; (800427c <__libc_init_array+0x44>)
 8004252:	1b64      	subs	r4, r4, r5
 8004254:	10a4      	asrs	r4, r4, #2
 8004256:	42a6      	cmp	r6, r4
 8004258:	d105      	bne.n	8004266 <__libc_init_array+0x2e>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004260:	4798      	blx	r3
 8004262:	3601      	adds	r6, #1
 8004264:	e7ee      	b.n	8004244 <__libc_init_array+0xc>
 8004266:	f855 3b04 	ldr.w	r3, [r5], #4
 800426a:	4798      	blx	r3
 800426c:	3601      	adds	r6, #1
 800426e:	e7f2      	b.n	8004256 <__libc_init_array+0x1e>
 8004270:	080042c8 	.word	0x080042c8
 8004274:	080042c8 	.word	0x080042c8
 8004278:	080042c8 	.word	0x080042c8
 800427c:	080042cc 	.word	0x080042cc

08004280 <_init>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	bf00      	nop
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr

0800428c <_fini>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr
